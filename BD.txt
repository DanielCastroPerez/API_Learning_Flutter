-- phpMyAdmin SQL Dump
-- version 5.2.1
-- https://www.phpmyadmin.net/
--
-- Servidor: 127.0.0.1
-- Tiempo de generación: 20-08-2025 a las 21:10:11
-- Versión del servidor: 10.4.32-MariaDB
-- Versión de PHP: 8.2.12

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
START TRANSACTION;
SET time_zone = "+00:00";

--
-- Base de datos: `flutterdb`
--
CREATE DATABASE IF NOT EXISTS `flutterdb` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;
USE `flutterdb`;

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `constructor_comun`
--

CREATE TABLE `constructor_comun` (
  `id` int(11) NOT NULL,
  `firma` text NOT NULL,
  `widget_id` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

--
-- RELACIONES PARA LA TABLA `constructor_comun`:
--   `widget_id`
--       `widget_tab` -> `id`
--

--
-- Volcado de datos para la tabla `constructor_comun`
--

INSERT INTO `constructor_comun` (`id`, `firma`, `widget_id`) VALUES
(1, 'Scaffold()', 1),
(2, 'AppBar()', 2),
(3, 'MaterialApp()', 3),
(4, 'MaterialApp.router() (para integración con paquetes de enrutamiento más avanzados)', 3),
(5, 'Container()', 4),
(6, 'Column()', 5),
(7, 'Row()', 6),
(8, 'Text()', 7),
(9, 'Text.rich() (para mostrar texto con múltiples estilos dentro de la misma cadena)', 7),
(10, 'SingleChildScrollView()', 8),
(11, 'Image.asset()', 9),
(12, 'Image.network()', 9),
(13, 'Image.file()', 9),
(14, 'Image.memory()', 9),
(15, 'Image() (usando directamente ImageProvider)', 9),
(16, 'Card()', 10),
(17, 'Padding({Key? key, required EdgeInsetsGeometry padding, Widget? child})', 11),
(18, 'ListTile()', 12),
(19, 'GestureDetector({Key? key, Widget? child, GestureTapCallback? onTap, ...})', 13),
(20, 'No se construye directamente, se accede a través de `Navigator.of(context)` o métodos estáticos como `Navigator.pushNamed()`.', 14),
(21, 'GridView.builder({Key? key, Axis scrollDirection = Axis.vertical, bool reverse = false, ScrollController? controller, bool? primary, ScrollPhysics? physics, bool shrinkWrap = false, EdgeInsetsGeometry? padding, required SliverGridDelegate gridDelegate, required IndexedWidgetBuilder itemBuilder, int? itemCount, bool addAutomaticKeepAlives = true, bool addRepaintBoundaries = true, bool addSemanticIndexes = true, double? cacheExtent, List<Widget> children = const <Widget>[]})', 15),
(22, 'GridView.count({Key? key, Axis scrollDirection = Axis.vertical, bool reverse = false, ScrollController? controller, bool? primary, ScrollPhysics? physics, bool shrinkWrap = false, EdgeInsetsGeometry? padding, required int crossAxisCount, double mainAxisSpacing = 0.0, double crossAxisSpacing = 0.0, double childAspectRatio = 1.0, bool addAutomaticKeepAlives = true, bool addRepaintBoundaries = true, bool addSemanticIndexes = true, double? cacheExtent, List<Widget> children = const <Widget>[]})', 16),
(23, 'Drawer({Key? key, Widget? child, double? elevation, double? width, String? semanticLabel})', 17),
(24, 'Transform({Key? key, required Matrix4 transform, AlignmentGeometry? alignment, Offset? origin, Widget? child})', 18),
(25, 'Transform.rotate({Key? key, required double angle, Offset? origin, AlignmentGeometry? alignment, Widget? child})', 18),
(26, 'Transform.scale({Key? key, required double scale, Offset? origin, AlignmentGeometry? alignment, double? scaleX, double? scaleY, Widget? child})', 18),
(27, 'Transform.translate({Key? key, required Offset offset, Widget? child})', 18),
(28, 'CustomScrollView({Key? key, Axis scrollDirection = Axis.vertical, bool reverse = false, ScrollController? controller, ScrollPhysics? physics, bool shrinkWrap = false, Key? center, double? anchor, double? cacheExtent, List<Widget> slivers = const <Widget>[], int? semanticChildCount, DragStartBehavior dragStartBehavior = DragStartBehavior.start, ScrollViewKeyboardDismissBehavior keyboardDismissBehavior = ScrollViewKeyboardDismissBehavior.manual, String? restorationId, Clip clipBehavior = Clip.hardEdge})', 19),
(29, 'PageView({Key? key, Axis scrollDirection = Axis.horizontal, PageController? controller, ScrollPhysics? physics, bool reverse = false, ValueChanged<int>? onPageChanged, List<Widget> children = const <Widget>[]})', 20),
(30, 'PageView.builder({Key? key, Axis scrollDirection = Axis.horizontal, PageController? controller, ScrollPhysics? physics, bool reverse = false, ValueChanged<int>? onPageChanged, required IndexedWidgetBuilder itemBuilder, int? itemCount})', 20),
(31, 'Stack({Key? key, AlignmentDirectional alignment = AlignmentDirectional.topStart, TextDirection? textDirection, StackFit fit = StackFit.loose, Clip clipBehavior = Clip.hardEdge, List<Widget> children = const <Widget>[]})', 21),
(32, 'ClipRRect({Key? key, required BorderRadiusGeometry borderRadius, Clip clipBehavior = Clip.antiAlias, Widget? child})', 22),
(33, 'BottomNavigationBar({Key? key, required List<BottomNavigationBarItem> items, ValueChanged<int>? onTap, int currentIndex = 0, double? elevation, BottomNavigationBarType? type, Color? fixedColor, Color? backgroundColor, Color? selectedItemColor, Color? unselectedItemColor, IconThemeData? selectedIconTheme, IconThemeData? unselectedIconTheme, TextStyle? selectedLabelStyle, TextStyle? unselectedLabelStyle, bool? showSelectedLabels, bool? showUnselectedLabels, MouseCursor? mouseCursor, bool enableFeedback = true, BottomNavigationBarLandscapeLayout? landscapeLayout})', 23),
(34, 'Expanded({Key? key, required Widget child, int flex = 1})', 24),
(35, 'Flexible({Key? key, required Widget child, int flex = 1, FlexFit fit = FlexFit.loose})', 24),
(36, 'ListView({Key? key, Axis scrollDirection = Axis.vertical, bool reverse = false, ScrollController? controller, bool? primary, ScrollPhysics? physics, bool shrinkWrap = false, EdgeInsetsGeometry? padding, double? itemExtent, double? prototypeItem, bool addAutomaticKeepAlives = true, bool addRepaintBoundaries = true, bool addSemanticIndexes = true, double? cacheExtent, List<Widget> children = const <Widget>[]})', 25),
(37, 'ListView.builder({Key? key, Axis scrollDirection = Axis.vertical, bool reverse = false, ScrollController? controller, bool? primary, ScrollPhysics? physics, bool shrinkWrap = false, EdgeInsetsGeometry? padding, double? itemExtent, required IndexedWidgetBuilder itemBuilder, int? itemCount, bool addAutomaticKeepAlives = true, bool addRepaintBoundaries = true, bool addSemanticIndexes = true, double? cacheExtent, String? restorationId})', 26);

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `propiedad_detallada`
--

CREATE TABLE `propiedad_detallada` (
  `id` int(11) NOT NULL,
  `nombre` varchar(30) NOT NULL,
  `tipo` varchar(30) NOT NULL,
  `descripcion_extendida` text NOT NULL,
  `ejemplo_propiedad` text NOT NULL,
  `widget_id` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

--
-- RELACIONES PARA LA TABLA `propiedad_detallada`:
--   `widget_id`
--       `widget_tab` -> `id`
--

--
-- Volcado de datos para la tabla `propiedad_detallada`
--

INSERT INTO `propiedad_detallada` (`id`, `nombre`, `tipo`, `descripcion_extendida`, `ejemplo_propiedad`, `widget_id`) VALUES
(1, 'appBar', 'AppBar', 'Una barra en la parte superior de la pantalla. Típicamente muestra el título de la aplicación, acciones y un botón de navegación (como el menú de hamburguesa o el botón de retroceso).', 'Scaffold(\n  appBar: AppBar(\n    title: const Text(\'Mi Aplicación\'),\n  ),\n  // ... otras propiedades\n)', 1),
(2, 'body', 'Widget', 'El contenido principal de la pantalla, ubicado debajo del `appBar` y cubriendo la mayor parte del área visible. Aquí es donde colocas la interfaz de usuario central de tu pantalla (listas, formularios, imágenes, etc.).', 'Scaffold(\n  body: Center(\n    child: Text(\'¡Hola, Mundo!\'),\n  ),\n  // ... otras propiedades\n)', 1),
(3, 'floatingActionButton', 'FloatingActionButton', 'Un botón circular que flota sobre el contenido del `body`, típicamente usado para la acción principal de la pantalla (ej. añadir un nuevo elemento, componer un correo).', 'Scaffold(\n  floatingActionButton: FloatingActionButton(\n    onPressed: () {\n      print(\'Botón flotante presionado\');\n    },\n    child: const Icon(Icons.add),\n  ),\n  // ... otras propiedades\n)', 1),
(4, 'drawer', 'Drawer', 'Un panel deslizante que se muestra desde el borde izquierdo de la pantalla (o derecho en RTL). Comúnmente utilizado para la navegación principal de la aplicación.', 'Scaffold(\n  drawer: Drawer(\n    child: ListView(\n      padding: EdgeInsets.zero,\n      children: const [\n        DrawerHeader(\n          decoration: BoxDecoration(\n            color: Colors.blue,\n          ),\n          child: Text(\'Encabezado del Drawer\'),\n        ),\n        ListTile(title: Text(\'Opción 1\')),\n        ListTile(title: Text(\'Opción 2\')),\n      ],\n    ),\n  ),\n  // ... otras propiedades\n)', 1),
(5, 'bottomNavigationBar', 'BottomNavigationBar', 'Una barra en la parte inferior de la pantalla que permite cambiar rápidamente entre un número pequeño de vistas de nivel superior (generalmente entre 3 y 5).', 'Scaffold(\n  bottomNavigationBar: BottomNavigationBar(\n    items: const [\n      BottomNavigationBarItem(\n        icon: Icon(Icons.home),\n        label: \'Inicio\',\n      ),\n      BottomNavigationBarItem(\n        icon: Icon(Icons.settings),\n        label: \'Ajustes\',\n      ),\n    ],\n    onTap: (index) { print(\'Ítem $index seleccionado\'); },\n  ),\n  // ... otras propiedades\n)', 1),
(6, 'backgroundColor', 'Color', 'El color de fondo del Scaffold. Por defecto, es el `scaffoldBackgroundColor` del tema de la aplicación.', 'Scaffold(\n  backgroundColor: Colors.grey.shade200,\n  body: const Center(child: Text(\'Fondo Gris Claro\')),\n)', 1),
(7, 'title', 'Widget', 'El widget principal que se muestra en el centro de la barra. Generalmente, es un widget `Text` que muestra el título de la pantalla actual. Puedes personalizar su estilo con `TextStyle`.', 'AppBar(\n  title: const Text(\'Mi Título\'),\n)', 2),
(8, 'leading', 'Widget', 'Un widget opcional que se muestra antes del `title` (a la izquierda) en la `AppBar`. Comúnmente, es un `IconButton` para un menú de navegación (`Icons.menu`) o una flecha de retroceso (`Icons.arrow_back`). Si un `Scaffold` tiene un `Drawer` o si hay una ruta previa en el navegador, Flutter a menudo provee automáticamente un botón `leading`.', 'AppBar(\n  leading: IconButton(\n    icon: const Icon(Icons.menu),\n    onPressed: () {\n      // Acción para abrir el Drawer\n      Scaffold.of(context).openDrawer();\n    },\n  ),\n  title: const Text(\'Menú Principal\'),\n)', 2),
(9, 'actions', 'List<Widget>', 'Una lista de widgets que se muestran después del `title` (a la derecha) en la `AppBar`. Usualmente son `IconButtons` para acciones comunes como búsqueda, compartir, o configuraciones. Se muestran en el orden en que se listan.', 'AppBar(\n  title: const Text(\'Acciones\'),\n  actions: [\n    IconButton(icon: const Icon(Icons.search), onPressed: () { /* Acción de búsqueda */ }),\n    IconButton(icon: const Icon(Icons.settings), onPressed: () { /* Acción de configuración */ }),\n  ],\n)', 2),
(10, 'bottom', 'PreferredSizeWidget', 'Un widget que se muestra directamente debajo de la `AppBar` principal. Es muy útil para integrar pestañas de navegación (`TabBar`) o cualquier otro widget que necesite anclarse en la parte inferior de la barra de aplicación.', 'AppBar(\n  title: const Text(\'Pestañas\'),\n  bottom: const TabBar(\n    tabs: [\n      Tab(icon: Icon(Icons.home)),\n      Tab(icon: Icon(Icons.settings)),\n    ],\n  ),\n)', 2),
(11, 'backgroundColor', 'Color', 'El color de fondo de la `AppBar`. Por defecto, es el `primaryColor` del tema de la aplicación. Puedes personalizarlo para que coincida con la paleta de colores de tu diseño.', 'AppBar(\n  backgroundColor: Colors.indigo.shade700,\n  title: const Text(\'Fondo Azul Oscuro\'),\n)', 2),
(12, 'elevation', 'double', 'La sombra visual debajo de la `AppBar`, que le da un efecto de elevación sobre el contenido. Un valor de `0.0` elimina la sombra. Un valor mayor hace la sombra más pronunciada.', 'AppBar(\n  elevation: 4.0, // Sombra estándar\n  title: const Text(\'Con Sombra\'),\n)', 2),
(13, 'home', 'Widget', 'El widget que se muestra como la pantalla principal de la aplicación cuando esta se inicia. Es la \'puerta principal\' visual de tu app. Si esta propiedad está definida, tendrá prioridad sobre `initialRoute` para la pantalla inicial.', 'MaterialApp(\n  home: const MyHomePage(), // Define MyHomePage como la pantalla de inicio\n)', 3),
(14, 'title', 'String', 'Un título descriptivo para la aplicación. Este título es utilizado por el sistema operativo (ej. en el selector de tareas recientes en Android o el app switcher en iOS) para identificar tu aplicación.', 'MaterialApp(\n  title: \'Mi Gran Aplicación\',\n  home: const MyHomePage(),\n)', 3),
(15, 'theme', 'ThemeData', 'Define el tema visual global de la aplicación (colores principales, tipografías por defecto, formas de los componentes, etc.). Esto ayuda a mantener una apariencia consistente en toda tu UI.', 'MaterialApp(\n  theme: ThemeData(\n    primarySwatch: Colors.teal,\n    appBarTheme: const AppBarTheme(color: Colors.cyan),\n  ),\n  home: const MyHomePage(),\n)', 3),
(16, 'routes', 'Map<String, WidgetBuilder>', 'Un mapa de rutas nombradas que la aplicación puede navegar. Cada entrada en el mapa asocia un nombre de ruta (String, ej. \'/settings\') con una función constructora de widget. Esto permite una navegación limpia y declarativa entre pantallas.\n\n**Nota Importante:** Si usas `routes`, el widget que se muestra al iniciar la app se define con `initialRoute` (si `home` no está presente).', 'MaterialApp(\n  initialRoute: \'/\',\n  routes: {\n    \'/\': (context) => const HomeScreen(),\n    \'/settings\': (context) => const SettingsScreen(),\n  },\n)', 3),
(17, 'initialRoute', 'String', 'La ruta con nombre que se carga primero cuando la aplicación se inicia. Esta propiedad es relevante cuando toda tu navegación se basa en rutas nombradas a través de la propiedad `routes` y no estás usando la propiedad `home`.', 'MaterialApp(\n  initialRoute: \'/dashboard\', // Inicia en la ruta del dashboard\n  routes: { \'/dashboard\': (context) => const DashboardScreen() },\n)', 3),
(18, 'navigatorKey', 'GlobalKey<NavigatorState>', 'Una clave global opcional para acceder al `Navigator` de la aplicación desde cualquier parte del árbol de widgets, incluso fuera del contexto de un widget que conoce el `Navigator` (útil para navegación programática o de servicios).', 'final GlobalKey<NavigatorState> navigatorKey = GlobalKey<NavigatorState>();\n\nMaterialApp(\n  navigatorKey: navigatorKey,\n  home: Builder(\n    builder: (context) => ElevatedButton(\n      onPressed: () => navigatorKey.currentState?.pushNamed(\'/settings\'),\n      child: const Text(\'Ir a Ajustes (con GlobalKey)\'),\n    ),\n  ),\n  routes: {\'/settings\': (context) => const SettingsScreen()},\n)', 3),
(19, 'debugShowCheckedModeBanner', 'bool', 'Controla si se muestra la bandera de \'DEBUG\' en la esquina superior derecha de la aplicación. Configúrala a `false` para quitarla en producción o al hacer capturas de pantalla limpias.', 'MaterialApp(\n  debugShowCheckedModeBanner: false, // Oculta la bandera de DEBUG\n  home: const MyHomePage(),\n)', 3),
(20, 'child', 'Widget', 'El único widget que contendrá el `Container`. Este widget se colocará dentro del área del `Container` y respetará su padding y alineación. Si no se especifica, el `Container` actuará como un espacio vacío estilizado.', 'Container(\n  color: Colors.lightGreen.shade100,\n  child: Text(\'Hola desde el Container\'),\n)', 4),
(21, 'width', 'double', 'Define el ancho fijo del contenedor. Si no se especifica, el `Container` intentará ser tan ancho como su padre si no tiene un `child`, o tan ancho como su `child` si lo tiene y no hay otras restricciones.', 'Container(\n  width: 150.0,\n  height: 100.0,\n  color: Colors.orange.shade200,\n  child: Center(child: Text(\'150x100\')), \n)', 4),
(22, 'height', 'double', 'Define el alto fijo del contenedor. Similar al `width`, si no se especifica, se ajustará al padre o al `child` según el contexto.', 'Container(\n  width: 100.0,\n  height: 200.0,\n  color: Colors.purple.shade100,\n  child: Center(child: Text(\'100x200\')), \n)', 4),
(23, 'color', 'Color', 'Establece el color de fondo del contenedor. **Importante:** Si usas la propiedad `decoration` para estilos más complejos, no puedes usar `color` directamente aquí; el color debe ir dentro de la `decoration` (ej. en `BoxDecoration`).', 'Container(\n  color: Colors.red,\n  child: Text(\'Fondo Rojo\'),\n)', 4),
(24, 'padding', 'EdgeInsetsGeometry', 'El espacio interno entre el borde del `Container` y su `child`. Este espacio \'empuja\' el contenido hacia adentro desde los bordes del contenedor. Se define usando `EdgeInsets` (ej. `EdgeInsets.all`, `EdgeInsets.only`).', 'Container(\n  color: Colors.cyan.shade100,\n  padding: EdgeInsets.all(20.0), // 20px de relleno en todos los lados\n  child: Text(\'Texto con padding\'),\n)', 4),
(25, 'margin', 'EdgeInsetsGeometry', 'El espacio externo entre el `Container` y otros widgets que lo rodean. Este espacio \'separa\' el contenedor de sus vecinos. También se define usando `EdgeInsets`.', 'Container(\n  color: Colors.yellow.shade100,\n  margin: EdgeInsets.only(top: 10.0, bottom: 10.0), // Margen solo arriba y abajo\n  child: Text(\'Texto con margin\'),\n)', 4),
(26, 'decoration', 'Decoration', 'Permite personalizar el aspecto visual del contenedor de formas más avanzadas que solo el `color`. Puedes definir bordes, esquinas redondeadas, gradientes, imágenes de fondo y sombras de caja. Si usas `decoration`, el `color` del `Container` debe ir dentro de la `BoxDecoration`.', 'Container(\n  decoration: BoxDecoration(\n    color: Colors.blueAccent,\n    borderRadius: BorderRadius.circular(10.0), // Esquinas redondeadas\n    border: Border.all(color: Colors.black, width: 2), // Borde\n    boxShadow: [\n      BoxShadow(\n        color: Colors.black.withOpacity(0.3),\n        spreadRadius: 3,\n        blurRadius: 5,\n        offset: Offset(0, 3),\n      ),\n    ],\n  ),\n  child: Text(\'Caja decorada\'),\n)', 4),
(27, 'alignment', 'AlignmentGeometry', 'Cómo se alinea el `child` dentro del `Container` si el `Container` es más grande que su `child`. Por defecto, el `child` se alinea al centro (`Alignment.center`). Puedes especificar otras alineaciones como `Alignment.topLeft`, `Alignment.bottomRight`, etc.', 'Container(\n  width: 200,\n  height: 200,\n  color: Colors.grey.shade300,\n  alignment: Alignment.bottomRight, // Alinea el hijo a la esquina inferior derecha\n  child: Text(\'Aquí abajo\'),\n)', 4),
(28, 'constraints', 'BoxConstraints', 'Define restricciones de tamaño adicionales para el `Container`, como un ancho o alto mínimo/máximo. Esto te da un control más fino sobre cómo el `Container` se ajusta a los límites de su padre o de su contenido. Por ejemplo, `BoxConstraints.expand()` hará que el Container ocupe todo el espacio disponible.', 'Container(\n  constraints: BoxConstraints.expand(width: 100, height: 100), // Fuerza un tamaño exacto\n  color: Colors.pink.shade100,\n  child: Text(\'Tamaño fijo\'),\n)', 4),
(29, 'children', 'List<Widget>', 'La lista de widgets que se mostrarán verticalmente, uno debajo del otro, dentro de la columna. Siempre se espera una lista de widgets, incluso si es solo uno.', 'Column(\n  children: [\n    Text(\'Primer ítem\'),\n    Text(\'Segundo ítem\'),\n  ],\n)', 5),
(30, 'mainAxisAlignment', 'MainAxisAlignment', 'Define cómo se alinean los hijos a lo largo del **eje principal (vertical)** de la columna. Este eje va de arriba a abajo. Las opciones comunes son:\n    - **`MainAxisAlignment.start`**: Alinea los hijos al principio del eje (arriba).\n    - **`MainAxisAlignment.center`**: Centra los hijos en el eje.\n    - **`MainAxisAlignment.end`**: Alinea los hijos al final del eje (abajo).\n    - **`MainAxisAlignment.spaceBetween`**: Distribuye el espacio sobrante uniformemente entre los hijos, con el primer hijo al principio y el último al final.\n    - **`MainAxisAlignment.spaceAround`**: Distribuye el espacio sobrante uniformemente alrededor de cada hijo (incluyendo espacio antes del primero y después del último).\n    - **`MainAxisAlignment.spaceEvenly`**: Distribuye el espacio sobrante uniformemente tanto entre los hijos como antes del primero y después del último, resultando en espacios del mismo tamaño.', 'Column(\n  mainAxisAlignment: MainAxisAlignment.center, // Centra los hijos verticalmente\n  children: const [\n    Icon(Icons.star),\n    Text(\'Estrellas\'),\n  ],\n)', 5),
(31, 'crossAxisAlignment', 'CrossAxisAlignment', 'Define cómo se alinean los hijos a lo largo del **eje transversal (horizontal)** de la columna. Este eje va de izquierda a derecha. Las opciones comunes son:\n    - **`CrossAxisAlignment.start`**: Alinea los hijos al principio del eje transversal (izquierda).\n    - **`CrossAxisAlignment.center`**: Centra los hijos en el eje transversal.\n    - **`CrossAxisAlignment.end`**: Alinea los hijos al final del eje transversal (derecha).\n    - **`CrossAxisAlignment.stretch`**: Estira los hijos para que llenen todo el espacio disponible a lo largo del eje transversal. Muy útil para que los hijos ocupen todo el ancho de la `Column`.\n    - **`CrossAxisAlignment.baseline`**: Alinea los hijos en base a su línea base de texto (útil cuando se mezclan textos de diferentes tamaños, requiere `textBaseline`).', 'Column(\n  crossAxisAlignment: CrossAxisAlignment.stretch, // Estira los hijos horizontalmente\n  children: [\n    Container(height: 50, color: Colors.red),\n    Container(height: 50, color: Colors.blue),\n  ],\n)', 5),
(32, 'mainAxisSize', 'MainAxisSize', 'Determina cuánto espacio debe ocupar la columna a lo largo de su **eje principal (vertical)**. Las opciones son:\n    - **`MainAxisSize.max`**: La `Column` intentará ocupar todo el espacio vertical disponible (por defecto).\n    - **`MainAxisSize.min`**: La `Column` ocupará solo el espacio vertical mínimo necesario para contener a sus `children`. Útil si no quieres que ocupe todo el alto disponible.', 'Column(\n  mainAxisSize: MainAxisSize.min, // La columna solo ocupará el alto necesario\n  children: const [\n    Text(\'Texto Corto\'),\n    Text(\'Otro Texto Más Corto\'),\n  ],\n)', 5),
(33, 'children', 'List<Widget>', 'La lista de widgets que se mostrarán horizontalmente, uno junto al otro, dentro de la fila. Siempre se espera una lista de widgets, incluso si es solo uno.', 'Row(\n  children: [\n    Text(\'Izquierda\'),\n    Text(\'Derecha\'),\n  ],\n)', 6),
(34, 'mainAxisAlignment', 'MainAxisAlignment', 'Define cómo se alinean los hijos a lo largo del **eje principal (horizontal)** de la fila. Este eje va de izquierda a derecha. Las opciones comunes son:\n    - **`MainAxisAlignment.start`**: Alinea los hijos al principio del eje (izquierda).\n    - **`MainAxisAlignment.center`**: Centra los hijos en el eje.\n    - **`MainAxisAlignment.end`**: Alinea los hijos al final del eje (derecha).\n    - **`MainAxisAlignment.spaceBetween`**: Distribuye el espacio sobrante uniformemente entre los hijos, con el primer hijo al principio y el último al final.\n    - **`MainAxisAlignment.spaceAround`**: Distribuye el espacio sobrante uniformemente alrededor de cada hijo (incluyendo espacio antes del primero y después del último).\n    - **`MainAxisAlignment.spaceEvenly`**: Distribuye el espacio sobrante uniformemente tanto entre los hijos como antes del primero y después del último, resultando en espacios del mismo tamaño.', 'Row(\n  mainAxisAlignment: MainAxisAlignment.spaceAround, // Distribuye los hijos con espacio alrededor\n  children: const [\n    Icon(Icons.thumb_up),\n    Text(\'Me gusta\'),\n    Icon(Icons.comment),\n  ],\n)', 6),
(35, 'crossAxisAlignment', 'CrossAxisAlignment', 'Define cómo se alinean los hijos a lo largo del **eje transversal (vertical)** de la fila. Este eje va de arriba a abajo. Las opciones comunes son:\n    - **`CrossAxisAlignment.start`**: Alinea los hijos al principio del eje transversal (arriba).\n    - **`CrossAxisAlignment.center`**: Centra los hijos en el eje transversal (por defecto si no se especifica y no hay `Expanded`/`Flexible`).\n    - **`CrossAxisAlignment.end`**: Alinea los hijos al final del eje transversal (abajo).\n    - **`CrossAxisAlignment.stretch`**: Estira los hijos para que llenen todo el espacio disponible a lo largo del eje transversal (ocupando todo el alto de la `Row`).\n    - **`CrossAxisAlignment.baseline`**: Alinea los hijos en base a su línea base de texto (útil cuando se mezclan textos de diferentes tamaños, requiere `textBaseline`).', 'Row(\n  crossAxisAlignment: CrossAxisAlignment.center, // Centra los hijos verticalmente\n  children: [\n    const Text(\'Título Grande\', style: TextStyle(fontSize: 30)),\n    const SizedBox(width: 10),\n    const Text(\'Subtítulo Pequeño\'),\n  ],\n)', 6),
(36, 'mainAxisSize', 'MainAxisSize', 'Determina cuánto espacio debe ocupar la fila a lo largo de su **eje principal (horizontal)**. Las opciones son:\n    - **`MainAxisSize.max`**: La `Row` intentará ocupar todo el espacio horizontal disponible (por defecto).\n    - **`MainAxisSize.min`**: La `Row` ocupará solo el espacio horizontal mínimo necesario para contener a sus `children`. Útil si no quieres que ocupe todo el ancho disponible.', 'Row(\n  mainAxisSize: MainAxisSize.min, // La fila solo ocupará el ancho necesario\n  children: const [\n    Chip(label: Text(\'Etiqueta 1\')),\n    Chip(label: Text(\'Etiqueta 2\')),\n  ],\n)', 6),
(37, 'data', 'String', 'La cadena de texto (el contenido real) que el widget `Text` va a mostrar. Es un parámetro posicional y, por lo tanto, el más importante del widget.', 'Text(\'¡Hola, Flutter!\')', 7),
(38, 'style', 'TextStyle', 'Define el estilo visual completo del texto. Acepta un objeto `TextStyle` que es una clase de configuración clave. Con `TextStyle` puedes personalizar ampliamente la apariencia del texto, incluyendo:\n    - **`color`**: El color del texto (ej. `Colors.blue`).\n    - **`fontSize`**: El tamaño de la fuente en píxeles lógicos (ej. `24.0`).\n    - **`fontWeight`**: El grosor de la fuente (ej. `FontWeight.bold` para negrita, `FontWeight.w700`).\n    - **`fontStyle`**: El estilo de la fuente (ej. `FontStyle.italic` para cursiva, `FontStyle.normal`).\n    - **`fontFamily`**: La familia de la fuente (el tipo de letra, ej. \'Roboto\', \'OpenSans\', o fuentes personalizadas).\n    - **`decoration`**: Decoraciones como `TextDecoration.underline` (subrayado), `TextDecoration.lineThrough` (tachado), `TextDecoration.overline`.\n    - **`decorationColor`**: El color de la decoración.\n    - **`decorationStyle`**: El estilo de la línea de decoración (ej. `TextDecorationStyle.wavy`).\n    - **`letterSpacing`**: El espacio horizontal adicional entre los caracteres del texto.\n    - **`wordSpacing`**: El espacio horizontal adicional entre las palabras del texto.\n    - **`height`**: La altura de la línea de texto, como un multiplicador del `fontSize` (ej. `1.5` para 150% de la altura normal).\n    - **`shadows`**: Una lista de sombras para aplicar al texto (`List<Shadow>`), cada una con su `offset`, `blurRadius` y `color`.\n    - **`background`**: Un `Paint` para dibujar un color o patrón de fondo *detrás* del texto (no el fondo del widget `Text` en sí).\n\n    Es inmutable; para modificar un estilo, creas una nueva instancia (`.copyWith()`). Hereda valores del `Theme` de la aplicación.', 'Text(\n  \'Texto Estilizado\',\n  style: TextStyle(\n    color: Colors.deepPurple,\n    fontSize: 22.0,\n    fontWeight: FontWeight.bold,\n    fontStyle: FontStyle.italic,\n    decoration: TextDecoration.underline,\n    decorationColor: Colors.red,\n    decorationStyle: TextDecorationStyle.wavy,\n  ),\n)', 7),
(39, 'textAlign', 'TextAlign', 'Define cómo se alinea el texto horizontalmente dentro del espacio disponible que ocupa el widget `Text`. Las opciones incluyen `TextAlign.left`, `TextAlign.center`, `TextAlign.right`, `TextAlign.justify` (para texto justificado en bloques).', 'Text(\n  \'Este texto está centrado.\',\n  textAlign: TextAlign.center,\n)', 7),
(40, 'maxLines', 'int', 'El número máximo de líneas que el texto puede ocupar. Si el texto excede este límite, se aplicará el comportamiento definido por la propiedad `overflow`.', 'Text(\n  \'Un texto muy largo que se limitará a una sola línea.\',\n  maxLines: 1,\n  overflow: TextOverflow.ellipsis,\n)', 7),
(41, 'overflow', 'TextOverflow', 'Determina cómo se maneja el texto si excede el espacio disponible o el `maxLines` especificado. Las opciones comunes son:\n    - **`TextOverflow.ellipsis`**: Añade puntos suspensivos (...) al final del texto.\n    - **`TextOverflow.fade`**: Difumina el final del texto.\n    - **`TextOverflow.clip`**: Simplemente recorta el texto sin añadir ningún indicador.\n    - **`TextOverflow.visible`**: El texto se desborda y puede renderizarse fuera de su caja (a menudo no deseado).', 'Text(\n  \'Mucho texto para una pequeña área. Mucho texto para una pequeña área.\',\n  maxLines: 1,\n  overflow: TextOverflow.fade,\n)', 7),
(42, 'textDirection', 'TextDirection', 'La dirección en la que se renderiza el texto (de izquierda a derecha o de derecha a izquierda). Es crucial para el soporte de idiomas RTL (Right-To-Left) como el árabe o el hebreo.\n    - **`TextDirection.ltr`**: Izquierda a derecha (por defecto en la mayoría de los casos).\n    - **`TextDirection.rtl`**: Derecha a izquierda.', 'Text(\n  \'Texto de prueba en RTL\',\n  textDirection: TextDirection.rtl,\n)', 7),
(43, 'child', 'Widget', 'El único widget que será desplazable. Puede ser cualquier widget, pero a menudo es un `Column` o un `Row` que contiene a su vez múltiples widgets, los cuales colectivamente exceden el espacio de la pantalla.', 'SingleChildScrollView(\n  child: Column(\n    children: [\n      // ... widgets que pueden exceder la pantalla\n    ],\n  ),\n)', 8),
(44, 'scrollDirection', 'Axis', 'Define la dirección en la que el contenido se puede desplazar. Por defecto es `Axis.vertical` (desplazamiento de arriba a abajo). Puedes cambiarlo a `Axis.horizontal` para un desplazamiento de izquierda a derecha.', 'SingleChildScrollView(\n  scrollDirection: Axis.horizontal, // Habilita el desplazamiento horizontal\n  child: Row(\n    children: [\n      Container(width: 200, height: 100, color: Colors.red),\n      Container(width: 200, height: 100, color: Colors.blue),\n    ],\n  ),\n)', 8),
(45, 'padding', 'EdgeInsetsGeometry', 'El espacio vacío que se añade alrededor del `child` dentro del área de desplazamiento. Esto es útil para que el contenido no se pegue a los bordes del área de desplazamiento. Se define usando `EdgeInsets`.', 'SingleChildScrollView(\n  padding: const EdgeInsets.all(20.0), // Añade 20px de relleno alrededor del contenido\n  child: Text(\'Contenido con padding desplazable\'),\n)', 8),
(46, 'physics', 'ScrollPhysics', 'Determina cómo se comporta el desplazamiento. Por defecto, adapta la física al sistema operativo (ej. efecto de rebote en iOS, efecto de sobre-desplazamiento en Android). Puedes usar `NeverScrollableScrollPhysics()` para deshabilitar el desplazamiento, o `BouncingScrollPhysics()` para forzar el rebote en todas las plataformas.', 'SingleChildScrollView(\n  physics: const BouncingScrollPhysics(), // Fuerza el efecto de rebote al final del desplazamiento\n  child: Text(\'Contenido con física de rebote\'),\n)', 8),
(47, 'controller', 'ScrollController', 'Un controlador opcional que te permite controlar programáticamente la posición de desplazamiento (ej. desplazarse a una posición específica, leer la posición actual) o escuchar eventos de desplazamiento.', 'final ScrollController _scrollController = ScrollController();\n\n// En tu widget:\nSingleChildScrollView(\n  controller: _scrollController,\n  child: Column(\n    children: [\n      // ... contenido\n      ElevatedButton(\n        onPressed: () => _scrollController.animateTo(\n          _scrollController.position.maxScrollExtent, // Desplazarse al final\n          duration: const Duration(seconds: 1),\n          curve: Curves.easeOut,\n        ),\n        child: const Text(\'Ir al Final\'),\n      ),\n    ],\n  ),\n)', 8),
(48, 'image', 'ImageProvider', 'La fuente de la imagen. No es un `Widget`, sino un `ImageProvider` que sabe cómo cargar los datos de la imagen. Los `ImageProvider` más comunes son:\n    - **`AssetImage`**: Para imágenes empaquetadas con tu app (desde la carpeta `assets`). Requiere que la ruta de la imagen esté declarada en `pubspec.yaml`.\n    - **`NetworkImage`**: Para imágenes cargadas desde una URL de internet.\n    - **`FileImage`**: Para imágenes cargadas desde un archivo en el sistema de archivos del dispositivo.\n    - **`MemoryImage`**: Para imágenes cargadas desde un `Uint8List` (bytes en memoria).', 'Image(\n  image: AssetImage(\'assets/my_local_image.png\'),\n)\n\nImage(\n  image: NetworkImage(\'https://picsum.photos/250/200\'),\n)', 9),
(49, 'width', 'double', 'Define el ancho deseado de la imagen en píxeles lógicos. Si no se especifica, la imagen se dimensionará automáticamente según sus restricciones parentales o su tamaño intrínseco.', 'Image(\n  image: NetworkImage(\'https://picsum.photos/250/200\'),\n  width: 100.0,\n)', 9),
(50, 'height', 'double', 'Define el alto deseado de la imagen en píxeles lógicos. Similar al `width`, si no se especifica, el alto se ajustará automáticamente.', 'Image(\n  image: NetworkImage(\'https://picsum.photos/250/200\'),\n  height: 150.0,\n)', 9),
(51, 'fit', 'BoxFit', 'Determina cómo se debe escalar la imagen para encajar en el espacio asignado por `width` y `height` o por sus restricciones parentales. Opciones comunes:\n    - **`BoxFit.cover`**: Escala la imagen uniformemente para que cubra completamente la caja, recortando cualquier parte que no quepa. Ideal para fondos o miniaturas.\n    - **`BoxFit.contain`**: Escala la imagen uniformemente para que quepa completamente dentro de la caja, dejando espacio vacío si es necesario (manteniendo la relación de aspecto).\n    - **`BoxFit.fill`**: Estira la imagen para que llene completamente la caja, ignorando su relación de aspecto (puede distorsionar la imagen).\n    - **`BoxFit.fitWidth`**: Escala la imagen para que su ancho coincida con el ancho de la caja, ajustando el alto proporcionalmente.\n    - **`BoxFit.fitHeight`**: Escala la imagen para que su alto coincida con el alto de la caja, ajustando el ancho proporcionalmente.\n    - **`BoxFit.none`**: No escala la imagen; simplemente la dibuja en su tamaño original en la parte superior izquierda de la caja (puede desbordarse).', 'Image(\n  image: NetworkImage(\'https://picsum.photos/250/200\'),\n  width: 100.0,\n  height: 100.0,\n  fit: BoxFit.cover, // La imagen llenará el espacio de 100x100, recortando si es necesario\n)', 9),
(52, 'alignment', 'AlignmentGeometry', 'Define cómo se alinea la imagen dentro de su espacio asignado si la imagen es más pequeña que la caja después de aplicar `fit`. Por defecto, es `Alignment.center`.', 'Image(\n  image: NetworkImage(\'https://picsum.photos/250/200\'),\n  width: 200.0,\n  height: 200.0,\n  fit: BoxFit.contain, // La imagen se ajusta al espacio\n  alignment: Alignment.bottomLeft, // La imagen se alinea a la parte inferior izquierda de la caja\n)', 9),
(53, 'color', 'Color', 'Un color opcional que se mezcla con los píxeles de la imagen. Útil para aplicar tintes o filtros de color a una imagen.', 'Image(\n  image: NetworkImage(\'https://picsum.photos/250/200\'),\n  color: Colors.blue.withOpacity(0.5), // Tinte azul semitransparente\n  colorBlendMode: BlendMode.srcATop,\n)', 9),
(54, 'errorBuilder', 'ImageErrorWidgetBuilder', 'Una función opcional que se llama si la imagen no se puede cargar (ej. URL incorrecta, archivo no encontrado). Permite mostrar un widget de reemplazo (ej. un icono de error) en lugar de simplemente fallar silenciosamente.', 'Image(\n  image: NetworkImage(\'https://url.invalida/imagen.jpg\'),\n  errorBuilder: (context, error, stackTrace) {\n    return const Icon(Icons.broken_image, size: 50, color: Colors.red);\n  },\n)', 9),
(55, 'loadingBuilder', 'ImageLoadingBuilder', 'Una función opcional que se llama mientras la imagen se está cargando. Permite mostrar un widget de marcador de posición (ej. un `CircularProgressIndicator`) mientras la imagen se descarga de la red o se carga desde el disco.', 'Image(\n  image: NetworkImage(\'https://picsum.photos/250/200\'),\n  loadingBuilder: (context, child, loadingProgress) {\n    if (loadingProgress == null) return child;\n    return Center(\n      child: CircularProgressIndicator(\n        value: loadingProgress.expectedTotalBytes != null\n            ? loadingProgress.cumulativeBytesLoaded / loadingProgress.expectedTotalBytes!\n            : null,\n      ),\n    );\n  },\n)', 9),
(56, 'child', 'Widget', 'El único widget que contiene la tarjeta. Es el contenido principal que se mostrará dentro de la superficie de la Card. Puedes anidar cualquier widget aquí, como `Column`, `Row`, `ListTile`, etc., para construir el diseño interno de la tarjeta.', 'Card(\n  child: Text(\'Contenido dentro de la tarjeta\'),\n)', 10),
(57, 'color', 'Color', 'Define el color de fondo de la tarjeta. Por defecto, toma el color de la superficie del tema de Material Design (`Theme.of(context).cardColor`). Puedes sobrescribirlo con cualquier color de tu elección para darle un estilo visual único a tu tarjeta.', 'Card(\n  color: Colors.blue.shade100,\n  child: Text(\'Tarjeta Azul Claro\'),\n)', 10),
(58, 'elevation', 'double', 'Controla la profundidad o \"altura\" de la tarjeta en relación con su padre. Un valor más alto crea una sombra más grande y difusa, haciendo que la tarjeta parezca más elevada y destacada. Un valor de `0.0` no muestra sombra. El valor por defecto es 1.0.', 'Card(\n  elevation: 8.0, // Hace que la tarjeta flote más\n  child: Text(\'Tarjeta con sombra pronunciada\'),\n)', 10),
(59, 'shape', 'ShapeBorder', 'Define la forma del borde de la tarjeta. Por defecto, es un `RoundedRectangleBorder` con un radio de borde pequeño. Puedes usarlo para personalizar el redondeo de las esquinas (`BorderRadius.circular()`) o incluso darle una forma completamente diferente a la tarjeta.', 'Card(\n  shape: RoundedRectangleBorder(\n    borderRadius: BorderRadius.circular(20.0), // Esquinas muy redondeadas\n    side: BorderSide(color: Colors.red, width: 2), // Borde rojo\n  ),\n  child: Text(\'Tarjeta con borde personalizado\'),\n)', 10),
(60, 'margin', 'EdgeInsetsGeometry', 'El espacio vacío alrededor de la tarjeta que la separa de otros widgets cercanos. Utiliza `EdgeInsets` para definir este espacio. El margen por defecto es `EdgeInsets.all(4.0)`. Un margen adecuado mejora la legibilidad y la organización del diseño.', 'Card(\n  margin: EdgeInsets.symmetric(horizontal: 16.0, vertical: 8.0),\n  child: Text(\'Tarjeta con margen lateral y vertical\'),\n)', 10),
(61, 'clipBehavior', 'Clip', 'Define cómo se debe \"recortar\" el contenido de la tarjeta si sobresale de sus límites. Es especialmente útil cuando la tarjeta tiene esquinas redondeadas y el contenido podría desbordarse. `Clip.antiAlias` proporciona un recorte suave para bordes redondeados, evitando artefactos visuales.', 'Card(\n  clipBehavior: Clip.antiAlias, // Asegura que el contenido se recorte suavemente con las esquinas\n  child: Image.network(\n    \'https://picsum.photos/200/100\', // Una imagen más grande que el Card para ver el recorte\n    fit: BoxFit.cover,\n  ),\n)', 10),
(62, 'shadowColor', 'Color', 'Define el color de la sombra que se dibuja debajo de la tarjeta debido a su `elevation`. Por defecto, la sombra es un tono de negro con opacidad. Puedes cambiar este color para que combine mejor con el tema de tu aplicación o para efectos visuales específicos.', 'Card(\n  elevation: 6.0,\n  shadowColor: Colors.purple.shade200, // Sombra morada clara\n  child: Text(\'Tarjeta con sombra morada\'),\n)', 10),
(63, 'padding', 'EdgeInsetsGeometry', 'Define la cantidad de espacio vacío que se debe aplicar alrededor del \'child\'. Puedes especificar un valor uniforme, solo para ciertos lados, o para lados horizontales/verticales.', 'Padding(\n  padding: const EdgeInsets.all(16.0), // Padding uniforme de 16px\n  child: Text(\'Con padding de 16\'),\n)\n\nPadding(\n  padding: const EdgeInsets.only(left: 8.0, top: 4.0), // Padding solo a la izquierda y arriba\n  child: Text(\'Con padding específico\'),\n)\n\nPadding(\n  padding: const EdgeInsets.symmetric(horizontal: 20.0), // Padding horizontal\n  child: Text(\'Con padding horizontal\'),\n)', 11),
(64, 'child', 'Widget', 'El widget al que se le aplicará el padding. El espacio definido por `padding` se agregará alrededor de este widget.', 'Padding(\n  padding: const EdgeInsets.all(8.0),\n  child: Container(\n    color: Colors.blue,\n    width: 100,\n    height: 100,\n  ),\n)', 11),
(65, 'leading', 'Widget', 'Un widget que se muestra antes del título y subtítulo. Comúnmente se usa para un `Icon`, `CircleAvatar` o `Image`.', 'ListTile(\n  leading: Icon(Icons.person),\n  title: Text(\'Nombre de Usuario\'),\n)', 12),
(66, 'title', 'Widget', 'El texto principal de la lista. Generalmente es un `Text` widget que muestra el nombre del elemento o una descripción principal.', 'ListTile(\n  title: Text(\'Configuración de la Cuenta\'),\n)', 12),
(67, 'subtitle', 'Widget', 'Texto secundario que se muestra debajo del título. Proporciona información adicional o un contexto más detallado para el elemento de la lista.', 'ListTile(\n  title: Text(\'Notificaciones\'),\n  subtitle: Text(\'Activar/Desactivar alertas\'),\n)', 12),
(68, 'trailing', 'Widget', 'Un widget que se muestra al final de la lista, después del título y subtítulo. Se usa a menudo para iconos de flecha (`Icons.chevron_right`), `Switch` widgets o `Checkbox`.', 'ListTile(\n  title: Text(\'Modo Oscuro\'),\n  trailing: Switch(value: true, onChanged: (bool val) {}),\n)', 12),
(69, 'onTap', 'GestureTapCallback', 'Una función de callback que se invoca cuando el usuario toca el `ListTile`. Ideal para manejar la navegación o acciones al seleccionar un elemento.', 'ListTile(\n  title: Text(\'Ver Detalles\'),\n  onTap: () {\n    print(\'ListTile presionado\');\n    // Navigator.push(context, MaterialPageRoute(builder: (context) => DetailScreen()));\n  },\n)', 12),
(70, 'dense', 'bool', 'Si es `true`, el `ListTile` será más compacto, reduciendo el espacio vertical ocupado. Útil para listas con muchos elementos.', 'ListTile(\n  dense: true,\n  title: Text(\'Elemento Compacto\'),\n)', 12),
(71, 'selected', 'bool', 'Si es `true`, el `ListTile` se dibujará con un color de fondo y de texto que indica que está seleccionado. Útil en listas de selección única o múltiple.', 'ListTile(\n  selected: true,\n  title: Text(\'Elemento Seleccionado\'),\n  selectedTileColor: Colors.blue.withOpacity(0.1),\n)', 12),
(72, 'child', 'Widget', 'El widget sobre el cual se detectarán los gestos. El `GestureDetector` no tiene una representación visual propia; solo se encarga de procesar las interacciones sobre su hijo.', 'GestureDetector(\n  child: Container(\n    color: Colors.red,\n    width: 50,\n    height: 50,\n  ),\n  onTap: () { print(\'Contenedor rojo tocado\'); },\n)', 13),
(73, 'onTap', 'GestureTapCallback', 'Callback que se invoca cuando el usuario toca el widget (un \'tap\' simple). Es el gesto más común y útil para acciones de clic.', 'GestureDetector(\n  onTap: () {\n    print(\'Imagen tocada!\');\n    // Abrir una nueva pantalla o mostrar un diálogo.\n  },\n  child: Image.asset(\'assets/my_image.png\'),\n)', 13),
(74, 'onDoubleTap', 'GestureTapCallback', 'Callback que se invoca cuando el usuario realiza un doble toque rápido en el widget.', 'GestureDetector(\n  onDoubleTap: () { print(\'Doble toque detectado!\'); },\n  child: const Icon(Icons.favorite, size: 50),\n)', 13),
(75, 'onLongPress', 'GestureLongPressCallback', 'Callback que se invoca cuando el usuario mantiene presionado el widget por un tiempo prolongado.', 'GestureDetector(\n  onLongPress: () { print(\'Presión prolongada!\'); },\n  child: const Text(\'Mantén presionado\'),\n)', 13),
(76, 'onPanUpdate', 'GestureDragUpdateCallback', 'Callback que se invoca repetidamente mientras el usuario arrastra su dedo a través del widget, proporcionando detalles sobre el movimiento.', 'double _top = 0.0;\ndouble _left = 0.0;\n\n// ... dentro de un State\nGestureDetector(\n  onPanUpdate: (details) {\n    setState(() {\n      _top += details.delta.dy;\n      _left += details.delta.dx;\n    });\n  },\n  child: CustomPaint( // Un widget que puede reaccionar al movimiento\n    painter: MyPainter(_top, _left),\n  ),\n)', 13),
(77, 'onTapUp', 'GestureTapUpCallback', 'Callback que se invoca cuando el usuario levanta su dedo después de un toque. Proporciona la posición exacta donde se levantó el dedo.', 'GestureDetector(\n  onTapUp: (details) { print(\'Dedo levantado en: ${details.localPosition}\'); },\n  child: Container(width: 100, height: 100, color: Colors.green),\n)', 13),
(78, 'initialRoute', 'String', 'La ruta con nombre que se mostrará inicialmente cuando se inicia la aplicación. Debe coincidir con una de las claves en el mapa de `routes`.', 'MaterialApp(\n  initialRoute: \'/\',\n  routes: {\n    \'/\': (context) => HomeScreen(),\n    \'/details\': (context) => DetailScreen(),\n  },\n)', 14),
(79, 'routes', 'Map<String, WidgetBuilder>', 'Un mapa que asocia nombres de cadena (rutas) con funciones que construyen los widgets de la pantalla correspondiente. Es la forma más común de definir rutas con nombre para una aplicación.', 'MaterialApp(\n  routes: {\n    \'/\': (context) => HomeScreen(),\n    \'/profile\': (context) => ProfileScreen(),\n    \'/settings\': (context) => SettingsScreen(),\n  },\n)', 14),
(80, 'pushNamed', 'Future<T?> Function(BuildConte', 'Empuja una nueva ruta con nombre a la pila del navegador. La nueva ruta se muestra en la parte superior de la pantalla. Permite pasar `arguments` opcionales a la ruta de destino.', 'ElevatedButton(\n  onPressed: () {\n    Navigator.pushNamed(\n      context,\n      \'/details\',\n      arguments: {\'id\': 42, \'name\': \'Producto XYZ\'},\n    );\n  },\n  child: const Text(\'Ir a Detalles\'),\n)', 14),
(81, 'pop', 'void Function(BuildContext con', 'Saca la ruta actual de la pila del navegador, revelando la ruta anterior. Opcionalmente, puedes pasar un `result` de vuelta a la ruta que hizo el `push`.', '// En la pantalla de detalles, para volver a la anterior\nElevatedButton(\n  onPressed: () {\n    Navigator.pop(context, \'Dato devuelto\');\n  },\n  child: const Text(\'Volver\'),\n)', 14),
(82, 'popAndPushNamed', 'Future<T?> Function(BuildConte', 'Saca la ruta actual de la pila y luego empuja una nueva ruta con nombre, reemplazando la ruta anterior en la pila. Útil para reemplazar la pantalla actual sin que la anterior permanezca en el historial.', 'ElevatedButton(\n  onPressed: () {\n    Navigator.popAndPushNamed(context, \'/home\');\n  },\n  child: const Text(\'Ir a Inicio y cerrar actual\'),\n)', 14),
(83, 'pushReplacementNamed', 'Future<T?> Function(BuildConte', 'Reemplaza la ruta actual con una nueva ruta con nombre. La ruta actual se elimina de la pila y la nueva se coloca en su lugar. Es similar a `popAndPushNamed` en efecto.', 'ElevatedButton(\n  onPressed: () {\n    // Usar después de un login para que el usuario no pueda volver a la pantalla de login\n    Navigator.pushReplacementNamed(context, \'/dashboard\');\n  },\n  child: const Text(\'Login y entrar\'),\n)', 14),
(84, 'itemBuilder', 'IndexedWidgetBuilder (función)', 'Una función de callback que se invoca para construir cada widget individual de la cuadrícula. Recibe el `BuildContext` y el `index` del elemento que debe ser construido. Esta es la clave de su eficiencia, ya que solo construye los widgets a medida que se hacen visibles.', 'itemBuilder: (BuildContext context, int index) {\n  return Container(\n    color: Colors.blue[100 * (index % 9)],\n    child: Center(child: Text(\'Item $index\')),\n  );\n}', 15),
(85, 'itemCount', 'int?', 'El número total de elementos en la cuadrícula. Si se omite, `GridView.builder` intentará construir elementos infinitamente hasta que no haya más espacio o `itemBuilder` devuelva `null`. **Es altamente recomendable especificarlo** para listas con un número finito de elementos, ya que ayuda a Flutter a optimizar el desplazamiento y la pre-carga.', 'itemCount: 50, // La cuadrícula tendrá 50 elementos', 15),
(86, 'gridDelegate', 'SliverGridDelegate', 'Define el layout de la cuadrícula, incluyendo el número de columnas/filas, el espaciado y la relación de aspecto de los elementos. Es una propiedad **obligatoria**. Los delegados más comunes son:\n- **`SliverGridDelegateWithFixedCrossAxisCount`**: Para un número fijo de elementos a lo largo del eje cruzado (ej., un número fijo de columnas).\n- **`SliverGridDelegateWithMaxCrossAxisExtent`**: Para elementos que tienen un tamaño máximo en el eje cruzado, permitiendo que Flutter calcule automáticamente el número de columnas/filas que caben.', '// Para 2 columnas fijas:\ngridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(\n  crossAxisCount: 2, // 2 columnas\n  crossAxisSpacing: 10.0, // Espacio horizontal\n  mainAxisSpacing: 10.0,  // Espacio vertical\n  childAspectRatio: 0.8,  // Ancho / Alto de cada celda\n)\n\n// Para elementos con un ancho máximo de 150px:\ngridDelegate: const SliverGridDelegateWithMaxCrossAxisExtent(\n  maxCrossAxisExtent: 150.0,\n  crossAxisSpacing: 10.0,\n  mainAxisSpacing: 10.0,\n  childAspectRatio: 1.0,\n)', 15),
(87, 'scrollDirection', 'Axis', 'El eje a lo largo del cual la cuadrícula se desplaza. Puede ser `Axis.vertical` (por defecto) para desplazamiento vertical, o `Axis.horizontal` para desplazamiento horizontal.', 'scrollDirection: Axis.horizontal, // La cuadrícula se desplaza horizontalmente', 15),
(88, 'padding', 'EdgeInsetsGeometry', 'Espacio vacío para insertar alrededor de todo el contenido de la cuadrícula.', 'padding: const EdgeInsets.all(16.0), // 16px de padding alrededor de la cuadrícula', 15),
(89, 'controller', 'ScrollController?', 'Un controlador opcional para controlar programáticamente la posición de desplazamiento de la cuadrícula (ej., ir al inicio o al final).', 'ScrollController _gridController = ScrollController();\n// ...\nGridView.builder(\n  controller: _gridController,\n  // ...\n);', 15),
(90, 'crossAxisCount', 'int', '**Obligatoria**. El número fijo de elementos que se mostrarán a lo largo del eje transversal. Si `scrollDirection` es vertical, define el número de columnas. Si es horizontal, define el número de filas.', 'crossAxisCount: 3, // Cuadrícula de 3 columnas', 16),
(91, 'children', 'List<Widget>', '**Obligatoria**. La lista de widgets que se mostrarán en la cuadrícula. Todos estos widgets se construyen y se renderizan inmediatamente (no de forma perezosa).', 'children: [\n  Container(color: Colors.red),\n  Container(color: Colors.green),\n  Container(color: Colors.blue),\n]', 16),
(92, 'mainAxisSpacing', 'double', 'El espacio en píxeles entre los elementos a lo largo del eje principal (la dirección de desplazamiento).', 'mainAxisSpacing: 10.0,', 16),
(93, 'crossAxisSpacing', 'double', 'El espacio en píxeles entre los elementos a lo largo del eje cruzado (perpendicular a la dirección de desplazamiento).', 'crossAxisSpacing: 10.0,', 16),
(94, 'childAspectRatio', 'double', 'La relación de aspecto (ancho / alto) para cada elemento de la cuadrícula. Por ejemplo, `1.0` crea elementos cuadrados. Ajusta esto para controlar la forma de las celdas.', 'childAspectRatio: 1.0, // Elementos cuadrados', 16),
(95, 'scrollDirection', 'Axis', 'El eje a lo largo del cual la cuadrícula se desplaza. Puede ser `Axis.vertical` (por defecto) o `Axis.horizontal`.', 'scrollDirection: Axis.horizontal,', 16),
(96, 'padding', 'EdgeInsetsGeometry', 'Espacio vacío para insertar alrededor de toda la cuadrícula.', 'padding: const EdgeInsets.all(8.0),', 16),
(97, 'child', 'Widget', 'El contenido principal del Drawer. Típicamente, este es un `ListView` que contiene `DrawerHeader` y una serie de `ListTile`s para las opciones de navegación.', 'Drawer(\n  child: ListView(\n    padding: EdgeInsets.zero,\n    children: const [\n      DrawerHeader(\n        decoration: BoxDecoration(color: Colors.blue),\n        child: Text(\'Encabezado\'),\n      ),\n      ListTile(title: Text(\'Opción 1\')),\n    ],\n  ),\n)', 17),
(98, 'elevation', 'double', 'La elevación Z del Drawer. Controla la sombra proyectada por el Drawer, dándole un efecto de levantamiento sobre el contenido principal de la pantalla.', 'Scaffold(\n  drawer: Drawer(\n    elevation: 16.0, // Mayor sombra\n    child: Text(\'Mi Drawer\'),\n  ),\n)', 17),
(99, 'width', 'double', 'El ancho del Drawer. Por defecto, ocupa una porción estándar de la pantalla, pero puedes especificar un ancho fijo si lo necesitas.', 'Scaffold(\n  drawer: Drawer(\n    width: 250.0, // Ancho fijo de 250 píxeles\n    child: Text(\'Drawer más estrecho\'),\n  ),\n)', 17),
(100, 'semanticLabel', 'String', 'Una etiqueta semántica que describe el Drawer para tecnologías de asistencia (lectores de pantalla). Es importante para la accesibilidad.', 'Drawer(\n  semanticLabel: \'Menú de navegación principal\',\n  child: Text(\'Opciones\'),\n)', 17),
(101, 'transform', 'Matrix4', 'La matriz 4x4 que define la transformación a aplicar. Es la propiedad más flexible y potente de `Transform`. Flutter ofrece constructores convenientes de `Matrix4` para operaciones comunes (ver ejemplos de `Matrix4` a continuación). Las rotaciones se especifican en **radianes** (grados * (π / 180)).\n\nPara **efectos 3D con perspectiva**, es crucial añadir `..setEntry(3, 2, 0.001)` (o un valor similar) a tu `Matrix4.identity()` antes de las rotaciones X/Y.', 'import \'dart:math\' as math;\n\n// Transformación 3D compleja con perspectiva\nTransform(\n  alignment: Alignment.center,\n  transform: Matrix4.identity()\n    ..setEntry(3, 2, 0.001) // Añade perspectiva\n    ..rotateX(math.pi / 6) // Rotación en eje X (30 grados)\n    ..rotateY(math.pi / 6), // Rotación en eje Y (30 grados)\n  child: Container(color: Colors.teal, width: 200, height: 150,\n    child: const Center(child: Text(\'3D!\', style: TextStyle(color: Colors.white)))),\n)', 18),
(102, 'Transform.rotate (Constructor ', 'double angle, Offset? origin, ', 'Un constructor de conveniencia que aplica una rotación simple a su hijo. El `angle` se especifica en radianes. Es equivalente a usar `transform: Matrix4.rotationZ(angle)`.', 'import \'dart:math\' as math;\n\n// Rotación simple en el plano 2D (eje Z)\nTransform.rotate(\n  angle: math.pi / 4, // 45 grados\n  alignment: Alignment.center,\n  child: Container(color: Colors.blue, width: 100, height: 100,\n    child: const Center(child: Text(\'Girado\', style: TextStyle(color: Colors.white)))),\n)', 18),
(103, 'Transform.scale (Constructor d', 'double scale, Offset? origin, ', 'Un constructor de conveniencia que aplica un escalado uniforme o no uniforme a su hijo. `scale` aplica el mismo factor en X e Y. `scaleX` y `scaleY` permiten un escalado independiente.', '// Escalado uniforme (150%)\nTransform.scale(\n  scale: 1.5,\n  alignment: Alignment.center,\n  child: Container(color: Colors.purple, width: 100, height: 100,\n    child: const Center(child: Text(\'Escalado\', style: TextStyle(color: Colors.white)))),\n)\n\n// Escalado no uniforme (ancho 50%, alto 200%)\nTransform.scale(\n  scaleX: 0.5, scaleY: 2.0,\n  alignment: Alignment.center,\n  child: Container(color: Colors.orange, width: 100, height: 100,\n    child: const Center(child: Text(\'Estirado\', style: TextStyle(color: Colors.white)))),\n)', 18),
(104, 'Transform.translate (Construct', 'Offset offset', 'Un constructor de conveniencia que aplica una traslación (movimiento) a su hijo. `offset` especifica la cantidad de movimiento en los ejes X e Y desde la posición original.', '// Traslación de 50px a la derecha y 20px hacia abajo\nTransform.translate(\n  offset: const Offset(50.0, 20.0),\n  child: Container(color: Colors.green, width: 100, height: 100,\n    child: const Center(child: Text(\'Movido\', style: TextStyle(color: Colors.white)))),\n)', 18),
(105, 'alignment', 'AlignmentGeometry', 'El punto de origen de la transformación, en relación con el tamaño del hijo. Por defecto es `Alignment.topLeft`. Para rotar o escalar desde el centro del widget, usa `Alignment.center`. Aplicable a todos los constructores de `Transform`.', 'Transform.rotate(\n  alignment: Alignment.center,\n  angle: math.pi / 2, // Gira 90 grados desde el centro\n  child: Container(width: 100, height: 100, color: Colors.amber),\n)', 18);
INSERT INTO `propiedad_detallada` (`id`, `nombre`, `tipo`, `descripcion_extendida`, `ejemplo_propiedad`, `widget_id`) VALUES
(106, 'origin', 'Offset', 'Un desplazamiento absoluto que especifica el punto de origen de la transformación, en relación con la esquina superior izquierda (0,0) del widget. Proporciona un control más fino que `alignment` para definir el pivote de la transformación.', 'Transform.rotate(\n  origin: const Offset(50, 50), // Gira alrededor del punto (50,50) del Container\n  angle: math.pi / 2,\n  child: Container(width: 100, height: 100, color: Colors.pinkAccent),\n)', 18),
(107, 'child', 'Widget', 'El widget al que se le aplicará la transformación visual. El `Transform` no tiene una representación visual propia; solo modifica cómo se dibuja su hijo.', 'Transform.rotate(\n  angle: 0.5,\n  child: Image.asset(\'assets/my_image.png\'), // Transformando una imagen\n)', 18),
(108, 'sliverx|s', 'List<Widget>', 'Una lista de \'Slivers\' que definen el contenido y el comportamiento de desplazamiento de CustomScrollView. Cada Sliver es una porción del área desplazable que puede tener su propio comportamiento de desplazamiento. Ejemplos comunes incluyen `SliverAppBar`, `SliverList`, `SliverGrid`, y `SliverToBoxAdapter`.', 'CustomScrollView(\n  slivers: <Widget>[\n    const SliverAppBar(\n      title: Text(\'Mi App Bar Flexible\'),\n      expandedHeight: 200.0,\n      floating: true, // La barra se esconde/muestra al desplazarse\n    ),\n    SliverList(\n      delegate: SliverChildBuilderDelegate(\n        (BuildContext context, int index) {\n          return ListTile(title: Text(\'Elemento $index\'));\n        },\n        childCount: 50,\n      ),\n    ),\n  ],\n)', 19),
(109, 'scrollDirection', 'Axis', 'El eje a lo largo del cual el contenido se desplaza. Puede ser `Axis.vertical` (por defecto) o `Axis.horizontal`.', 'CustomScrollView(\n  scrollDirection: Axis.horizontal,\n  slivers: <Widget>[\n    // ... Slivers diseñados para desplazamiento horizontal\n  ],\n)', 19),
(110, 'controller', 'ScrollController', 'Un controlador que puede ser usado para controlar programáticamente la posición de desplazamiento de CustomScrollView, añadir oyentes a eventos de desplazamiento, etc.', 'ScrollController _scrollController = ScrollController();\n\n// ... dentro de un StatefulWidget\nCustomScrollView(\n  controller: _scrollController,\n  slivers: [/* ... */],\n)\n\n// Para ir al inicio programáticamente:\n_scrollController.animateTo(0.0, duration: Duration(seconds: 1), curve: Curves.easeOut);', 19),
(111, 'physics', 'ScrollPhysics', 'Define cómo el CustomScrollView responde a la entrada del usuario y a los límites del desplazamiento. Ejemplos incluyen `BouncingScrollPhysics` (efecto de rebote en iOS) o `ClampingScrollPhysics` (efecto de fijación en Android).', 'CustomScrollView(\n  physics: const BouncingScrollPhysics(), // Efecto de rebote al final del scroll\n  slivers: [/* ... */],\n)', 19),
(112, 'children', 'List<Widget>', 'La lista de widgets que se mostrarán como páginas. Cada widget en esta lista se considera una página individual y se cargará en memoria cuando el PageView sea construido.', 'PageView(\n  children: const [\n    Center(child: Text(\'Página 1\')),\n    Center(child: Text(\'Página 2\')),\n    Center(child: Text(\'Página 3\')),\n  ],\n)', 20),
(113, 'itemBuilder (para PageView.bui', 'PageViewIndexedWidgetBuilder', 'Una función de callback que construye las páginas de forma perezosa (solo cuando son necesarias) para PageView.builder. Esto es más eficiente para un gran número de páginas, similar a ListView.builder.', 'PageView.builder(\n  itemCount: 10, // Número total de páginas\n  itemBuilder: (BuildContext context, int index) {\n    return Center(child: Text(\'Página ${index + 1}\'));\n  },\n)', 20),
(114, 'scrollDirection', 'Axis', 'Define el eje a lo largo del cual las páginas pueden ser desplazadas. Puede ser `Axis.horizontal` (por defecto) o `Axis.vertical`.', 'PageView(\n  scrollDirection: Axis.vertical,\n  children: const [\n    Center(child: Text(\'Desliza Hacia Arriba/Abajo 1\')),\n    Center(child: Text(\'Desliza Hacia Arriba/Abajo 2\')),\n  ],\n)', 20),
(115, 'controller', 'PageController', 'Un controlador que permite manipular programáticamente el PageView. Puedes usarlo para saltar a una página específica (`jumpToPage`) o animar la transición a una página (`animateToPage`).', 'PageController _pageController = PageController(initialPage: 0);\n\n// ... dentro de un StatefulWidget\nPageView(\n  controller: _pageController,\n  // ...\n)\n\n// En un botón:\nElevatedButton(\n  onPressed: () {\n    _pageController.animateToPage(2,\n      duration: const Duration(milliseconds: 300),\n      curve: Curves.easeIn,\n    );\n  },\n  child: const Text(\'Ir a Página 3\'),\n);', 20),
(116, 'onPageChanged', 'ValueChanged<int>', 'Una función de callback que se invoca cada vez que la página actualmente visible cambia. Recibe el índice de la nueva página como argumento. Útil para actualizar indicadores de página o el estado de la UI.', 'int _currentPage = 0;\n\n// ... dentro de un StatefulWidget\nPageView(\n  onPageChanged: (int index) {\n    setState(() {\n      _currentPage = index;\n    });\n  },\n  children: const [ /* ... */ ],\n)\n// Text(\'Página actual: $_currentPage\');', 20),
(117, 'children', 'List<Widget>', 'La lista de widgets que se superpondrán. El orden de los widgets en esta lista determina su orden de apilamiento: el primer widget es el más bajo en la pila, y el último es el más alto (frontal).', 'Stack(\n  children: const [\n    Image.network(\'https://picsum.photos/400/300\'),\n    Align(\n      alignment: Alignment.bottomCenter,\n      child: Text(\'Texto sobre imagen\', style: TextStyle(color: Colors.white)),\n    ),\n    Positioned(\n      top: 10, right: 10,\n      child: Icon(Icons.star, color: Colors.yellow, size: 30),\n    ),\n  ],\n)', 21),
(118, 'alignment', 'AlignmentGeometry', 'Cómo se alinean los hijos no posicionados dentro del Stack. Por defecto, es `AlignmentDirectional.topStart` (esquina superior izquierda).', 'Stack(\n  alignment: Alignment.center, // Todos los hijos no posicionados se centran\n  children: [\n    Container(width: 200, height: 200, color: Colors.blue),\n    Container(width: 100, height: 100, color: Colors.red),\n  ],\n)', 21),
(119, 'fit', 'StackFit', 'Determina cómo los hijos no posicionados se ajustan al tamaño del Stack.\n- `StackFit.loose` (por defecto): Los hijos pueden ser tan grandes como quieran (su tamaño intrínseco).\n- `StackFit.expand`: Los hijos no posicionados se expanden para llenar el Stack.', 'Stack(\n  fit: StackFit.expand, // El Container se expande para llenar el Stack\n  children: [\n    Container(color: Colors.yellow),\n    Center(child: Text(\'Expandido\')),\n  ],\n)', 21),
(120, 'borderRadius', 'BorderRadiusGeometry', 'Define el radio de las esquinas que se aplicará al hijo. Es una propiedad obligatoria.\n- `BorderRadius.circular(radius)`: Aplica el mismo radio a todas las esquinas.\n- `BorderRadius.only(...)`: Permite especificar radios diferentes para esquinas individuales (topLeft, topRight, bottomLeft, bottomRight).', '// Radio uniforme en todas las esquinas\nClipRRect(\n  borderRadius: BorderRadius.circular(15.0),\n  child: Image.network(\'https://picsum.photos/200/200?random=4\'),\n)\n\n// Radios diferentes\nClipRRect(\n  borderRadius: const BorderRadius.only(\n    topLeft: Radius.circular(20.0),\n    bottomRight: Radius.circular(50.0),\n  ),\n  child: Container(width: 150, height: 150, color: Colors.teal),\n)', 22),
(121, 'child', 'Widget', 'El widget que será recortado con las esquinas redondeadas. `ClipRRect` no tiene una representación visual propia, solo modifica la forma de su hijo.', 'ClipRRect(\n  borderRadius: BorderRadius.circular(8.0),\n  child: Container(width: 100, height: 100, color: Colors.orange,\n    child: const Center(child: Text(\'Recortado\'))),\n)', 22),
(122, 'clipBehavior', 'Clip', 'Cómo se recorta el contenido que excede los límites. Por defecto es `Clip.antiAlias` para un suavizado de bordes. Otros valores pueden afectar el rendimiento o la calidad del recorte (ej. `Clip.hardEdge`).', 'ClipRRect(\n  borderRadius: BorderRadius.circular(10.0),\n  clipBehavior: Clip.antiAliasWithSaveLayer, // Para escenarios avanzados\n  child: Container(width: 100, height: 100, color: Colors.blue),\n)', 22),
(123, 'items', 'List<BottomNavigationBarItem>', '**Obligatoria**. Una lista de `BottomNavigationBarItem`s, donde cada ítem representa una \'pestaña\' en la barra de navegación. Cada `BottomNavigationBarItem` requiere un `icon` y opcionalmente un `label` (texto).', 'items: const <BottomNavigationBarItem>[\n  BottomNavigationBarItem(icon: Icon(Icons.home), label: \'Inicio\'),\n  BottomNavigationBarItem(icon: Icon(Icons.search), label: \'Buscar\'),\n  BottomNavigationBarItem(icon: Icon(Icons.person), label: \'Perfil\'),\n],', 23),
(124, 'onTap', 'ValueChanged<int>', '**Obligatoria**. Una función de callback que se invoca cuando el usuario toca un ítem de la barra de navegación. Recibe el `index` (posición) del ítem seleccionado. Es crucial para actualizar el estado de la aplicación y mostrar el contenido de la página correspondiente.', 'int _selectedIndex = 0;\n// ...\nonTap: (int index) {\n  setState(() {\n    _selectedIndex = index;\n  });\n},', 23),
(125, 'currentIndex', 'int', '**Obligatoria**. El índice del `BottomNavigationBarItem` que está actualmente seleccionado. Flutter usa este valor para resaltar visualmente el ítem activo. Debes actualizar este valor en tu `setState` en el callback `onTap`.', 'currentIndex: _selectedIndex, // Donde _selectedIndex es la variable de estado actual', 23),
(126, 'type', 'BottomNavigationBarType', 'Define el comportamiento de diseño de los ítems:\n- `BottomNavigationBarType.fixed`: Los ítems tienen un ancho fijo y el fondo es estático (por defecto para 3 o menos ítems).\n- `BottomNavigationBarType.shifting`: El ítem seleccionado se agranda ligeramente y el color de fondo puede cambiar (por defecto para más de 3 ítems).', 'type: BottomNavigationBarType.fixed,', 23),
(127, 'selectedItemColor', 'Color?', 'El color de los íconos y etiquetas del ítem que está seleccionado.', 'selectedItemColor: Colors.blueAccent,', 23),
(128, 'unselectedItemColor', 'Color?', 'El color de los íconos y etiquetas de los ítems que no están seleccionados.', 'unselectedItemColor: Colors.grey,', 23),
(129, 'backgroundColor', 'Color?', 'El color de fondo de toda la barra de navegación.', 'backgroundColor: Colors.white,', 23),
(130, 'child', 'Widget', '**Obligatoria**. El widget que se verá afectado por el comportamiento de expansión. `Expanded` y `Flexible` no son visibles por sí mismos.', 'Expanded(child: Container(color: Colors.blue))', 24),
(131, 'flex', 'int', 'Un factor de expansión que distribuye el espacio disponible entre múltiples widgets `Expanded` o `Flexible`. Si varios hijos tienen un valor `flex`, el espacio restante se divide proporcionalmente entre ellos. Por defecto, su valor es `1`.', 'Row(\n  children: [\n    Expanded(flex: 2, child: Container()), // Ocupará el doble de espacio\n    Expanded(flex: 1, child: Container()),\n  ]\n)', 24),
(132, 'fit', 'FlexFit', '**Exclusivo de Flexible**. Define cómo el hijo se ajusta al espacio disponible. Es la clave de la diferencia entre `Expanded` y `Flexible`.\n- **`FlexFit.tight`**: El hijo es forzado a ocupar todo el espacio disponible. `Expanded` es esencialmente un `Flexible` con `fit: FlexFit.tight`.\n- **`FlexFit.loose`**: El hijo puede ser tan grande como el espacio disponible, pero no está obligado a serlo. Se dimensionará a su tamaño intrínseco si es menor que el espacio asignado.', 'Flexible(fit: FlexFit.loose, child: Text(\'Widget con fit: loose\'))', 24),
(133, 'children', 'List<Widget>', '**Obligatoria**. La lista de widgets que se mostrarán en la lista. Todos los widgets en esta lista se construyen y se añaden al árbol de widgets al mismo tiempo, sin importar si son visibles o no en la pantalla.', 'children: const <Widget>[\n  ListTile(title: Text(\'Elemento 1\')),\n  ListTile(title: Text(\'Elemento 2\')),\n  ListTile(title: Text(\'Elemento 3\')),\n]', 25),
(134, 'scrollDirection', 'Axis', 'El eje a lo largo del cual la lista se desplaza. Puede ser `Axis.vertical` (por defecto) o `Axis.horizontal`.', 'scrollDirection: Axis.horizontal,', 25),
(135, 'padding', 'EdgeInsetsGeometry', 'Espacio vacío para insertar alrededor de todo el contenido de la lista.', 'padding: const EdgeInsets.all(16.0),', 25),
(136, 'physics', 'ScrollPhysics', 'Define cómo el ListView se comporta al ser desplazado. Permite deshabilitar el desplazamiento (`NeverScrollableScrollPhysics`) o cambiar el efecto de rebote (`BouncingScrollPhysics`), entre otros.', 'physics: const BouncingScrollPhysics(),', 25),
(137, 'shrinkWrap', 'bool', 'Si es `true`, el ListView se ajustará a la altura de su contenido. Es útil en columnas o filas para evitar errores de desbordamiento, pero su uso a menudo indica un diseño subóptimo o un problema de layout. No es eficiente para listas largas.', 'shrinkWrap: true,', 25),
(138, 'itemBuilder', 'IndexedWidgetBuilder (función)', '**Obligatoria**. Una función de callback que se invoca para construir cada widget individual de la lista. Recibe el `BuildContext` y el `index` del elemento que debe ser construido. Esta es la clave de su eficiencia, ya que solo construye los widgets a medida que son necesarios.', 'itemBuilder: (BuildContext context, int index) {\n  return ListTile(title: Text(\'Elemento $index\'));\n}', 26),
(139, 'itemCount', 'int?', 'El número total de elementos en la lista. Si se omite, `ListView.builder` intentará construir elementos infinitamente hasta que no haya más espacio o `itemBuilder` devuelva `null`. **Es altamente recomendable especificarlo** para listas con un número finito de elementos, ya que ayuda a Flutter a optimizar el desplazamiento y la pre-carga.', 'itemCount: 50, // La lista tendrá 50 elementos', 26),
(140, 'scrollDirection', 'Axis', 'El eje a lo largo del cual la lista se desplaza. Puede ser `Axis.vertical` (por defecto) o `Axis.horizontal`.', 'scrollDirection: Axis.horizontal,', 26),
(141, 'padding', 'EdgeInsetsGeometry', 'Espacio vacío para insertar alrededor de todo el contenido de la lista.', 'padding: const EdgeInsets.all(16.0),', 26),
(142, 'separatorBuilder (para ListVie', 'IndexedWidgetBuilder (función)', 'Una propiedad de la variante `ListView.separated` que construye un widget (ej. `Divider`) entre cada elemento de la lista, simplificando el código.', 'separatorBuilder: (context, index) => const Divider(),', 26);

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `uso_comun`
--

CREATE TABLE `uso_comun` (
  `id` int(11) NOT NULL,
  `descripcion` text NOT NULL,
  `widget_id` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

--
-- RELACIONES PARA LA TABLA `uso_comun`:
--   `widget_id`
--       `widget_tab` -> `id`
--

--
-- Volcado de datos para la tabla `uso_comun`
--

INSERT INTO `uso_comun` (`id`, `descripcion`, `widget_id`) VALUES
(1, 'La base para casi todas las pantallas de una aplicación Flutter que siguen las guías de Material Design.', 1),
(2, 'Organizar los elementos estructurales de la UI de una manera estándar y predecible.', 1),
(3, 'Mostrar el título de la pantalla actual o el nombre de la aplicación.', 2),
(4, 'Proveer botones de navegación (atrás, menú) y acciones rápidas (búsqueda, configuración, guardar).', 2),
(5, 'Integrar barras de pestañas (`TabBar`) para navegación secundaria.', 2),
(6, 'Definir el punto de entrada principal de cualquier aplicación Flutter basada en Material Design.', 3),
(7, 'Configurar el tema visual global (colores, fuentes) para toda la aplicación.', 3),
(8, 'Gestionar la navegación entre diferentes pantallas de la aplicación a través de rutas nombradas.', 3),
(9, 'Crear tarjetas, paneles o secciones con estilos personalizados (colores de fondo, bordes, sombras).', 4),
(10, 'Establecer dimensiones específicas (ancho, alto) para un widget o un espacio.', 4),
(11, 'Añadir espaciado interno (padding) o externo (margin) alrededor de los elementos.', 4),
(12, 'Agrupar múltiples widgets para aplicarles un estilo o un posicionamiento conjunto.', 4),
(13, 'Crear listas de elementos apilados (menus, formularios).', 5),
(14, 'Organizar componentes de una tarjeta verticalmente (imagen arriba, texto abajo).', 5),
(15, 'Estructurar la disposición principal de una sección de la UI.', 5),
(16, 'Crear barras de botones o iconos.', 6),
(17, 'Diseñar la disposición de elementos dentro de una tarjeta o lista (ej. icono, título, subtítulo).', 6),
(18, 'Organizar componentes de un formulario horizontalmente.', 6),
(19, 'Alinear elementos de una barra de navegación inferior.', 6),
(20, 'Mostrar cualquier tipo de información textual en la UI, como títulos, párrafos, etiquetas, descripciones.', 7),
(21, 'Etiquetas para botones, campos de entrada o iconos.', 7),
(22, 'Mensajes informativos o de estado para el usuario.', 7),
(23, 'Hacer que formularios largos sean desplazables.', 8),
(24, 'Permitir el desplazamiento en pantallas de detalles de productos o perfiles de usuario que pueden tener mucho contenido.', 8),
(25, 'Cuando el contenido es dinámico y podría exceder el tamaño de la pantalla en diferentes dispositivos o con diferentes datos.', 8),
(26, 'Mostrar logotipos y gráficos de la aplicación.', 9),
(27, 'Presentar imágenes de productos, avatares de usuario o fondos.', 9),
(28, 'Integrar imágenes de la web o de la galería del usuario.', 9),
(29, 'Mostrar información agrupada y relacionada (ej. detalles de un producto, un post en un feed, una noticia).', 10),
(30, 'Crear elementos interactivos que puedan ser tocados para expandir información o navegar (a menudo combinados con `InkWell` o `GestureDetector`).', 10),
(31, 'Organizar el contenido de manera visualmente atractiva y jerárquica en un diseño Material Design.', 10),
(32, 'Crear espacio entre widgets en un `Column`, `Row` o `Stack`.', 11),
(33, 'Ajustar la separación de un widget respecto a los bordes de la pantalla o de su contenedor padre.', 11),
(34, 'Mejorar la legibilidad y la estética de la interfaz de usuario.', 11),
(35, 'Elementos en `ListView` o `Column` para mostrar información estructurada.', 12),
(36, 'Opciones en `Drawer` para navegación.', 12),
(37, 'Configuraciones en pantallas de ajustes.', 12),
(38, 'Listas de selección simple o múltiple.', 12),
(39, 'Hacer que widgets no interactivos (como `Image`, `Container`, `Text`) respondan a toques.', 13),
(40, 'Implementar gestos complejos como arrastrar y soltar, escalar o rotar.', 13),
(41, 'Detectar múltiples tipos de interacción en una sola área.', 13),
(42, 'Gestionar la navegación entre todas las pantallas de una aplicación Flutter.', 14),
(43, 'Manejar el historial de navegación (pila de pantallas).', 14),
(44, 'Pasar datos entre pantallas (con `arguments`).', 14),
(45, 'Controlar el flujo de la aplicación (ej. después de un login, reemplazar la pantalla de login con la principal).', 14),
(46, 'Crear galerías de imágenes o miniaturas donde el número de fotos puede ser muy grande.', 15),
(47, 'Diseñar listados de productos en una tienda online con un formato de rejilla.', 15),
(48, 'Implementar menús o pantallas de categoría con elementos dispuestos en un formato cuadriculado.', 15),
(49, 'Cuando se requiere un diseño de cuadrícula eficiente para manejar grandes volúmenes de datos.', 15),
(50, 'Crear cuadrículas de iconos o botones para menús o paneles de control con un número fijo de opciones.', 16),
(51, 'Mostrar una pequeña colección de elementos en un diseño cuadriculado donde la pre-carga de todos los elementos no afecta el rendimiento (ej., menos de 20-30 elementos).', 16),
(52, 'Diseñar teclados numéricos o selectores de color en formato de rejilla.', 16),
(53, 'Proporcionar acceso a las secciones principales de una aplicación (ej. Inicio, Perfil, Configuración, Cerrar Sesión).', 17),
(54, 'Mostrar opciones de navegación que no necesitan estar siempre visibles en la parte inferior de la pantalla.', 17),
(55, 'Ofrecer una experiencia de usuario familiar en plataformas móviles.', 17),
(56, 'Crear animaciones de rotación, escalado o movimiento de widgets de forma visualmente impactante.', 18),
(57, 'Desarrollar efectos visuales complejos, como voltear tarjetas, animaciones de entrada/salida dinámicas o simular objetos 3D.', 18),
(58, 'Ajustar la apariencia visual de un widget sin alterar su lugar y tamaño real en el layout general de la UI.', 18),
(59, 'Interactuar con gestos para permitir al usuario manipular visualmente elementos (ej. girar una imagen con el dedo mediante un `GestureDetector`).', 18),
(60, 'Crear interfaces de usuario con efectos de desplazamiento complejos y dinámicos, como AppBars plegables o secciones flotantes.', 19),
(61, 'Combinar diferentes tipos de listas (ej. una cuadrícula seguida de una lista lineal) en una única vista desplazable y coherente.', 19),
(62, 'Optimizar el rendimiento al mostrar grandes cantidades de datos, ya que los Slivers (como `SliverList` y `SliverGrid`) renderizan los elementos de forma perezosa (solo los visibles).', 19),
(63, 'Implementar efectos de paralaje o diseños donde los elementos se comportan de manera no estándar al desplazarse.', 19),
(64, 'Implementar carruseles de imágenes o banners promocionales.', 20),
(65, 'Crear flujos de onboarding (bienvenida) o tutoriales interactivos.', 20),
(66, 'Diseñar interfaces de usuario con navegación basada en pestañas personalizadas.', 20),
(67, 'Mostrar una serie de vistas relacionadas que el usuario puede explorar deslizando.', 20),
(68, 'Colocar un `FloatingActionButton` sobre el contenido principal de una pantalla.', 21),
(69, 'Mostrar insignias de notificación (badges) sobre iconos o avatares.', 21),
(70, 'Superponer texto, controles o elementos gráficos sobre imágenes de fondo o videos.', 21),
(71, 'Crear efectos de UI donde los elementos se mueven de forma independiente sobre un fondo o capa base.', 21),
(72, 'Dar un aspecto suave y moderno a las imágenes de perfil o de productos.', 22),
(73, 'Redondear las esquinas de `Containers`, `Cards` o `ElevatedButtons` para diseños personalizados.', 22),
(74, 'Asegurar que el contenido (como videos incrustados o mapas) se muestre con esquinas redondeadas.', 22),
(75, 'Combinar con `BoxDecoration` en `Container` para un control completo de bordes y fondos.', 22),
(76, 'Implementar la navegación principal de nivel superior en la mayoría de las aplicaciones móviles (ej., Home, Search, Profile).', 23),
(77, 'Proporcionar un acceso rápido y constante a las secciones clave de la aplicación desde cualquier pantalla.', 23),
(78, 'Cuando se requiere un diseño de navegación claro y siguiendo las directrices de Material Design.', 23),
(79, '**Expanded:** Para hacer que un widget ocupe el espacio restante en una barra de herramientas, un pie de página o un layout de fila.', 24),
(80, '**Expanded:** Para distribuir el espacio restante equitativamente entre múltiples elementos (usando `flex`).', 24),
(81, '**Flexible:** Para permitir que un widget se ajuste al espacio, pero sin forzarlo a estirarse, evitando el desbordamiento si su contenido es pequeño.', 24),
(82, 'Crear listas con un **número pequeño y fijo de elementos** que no cambian, como un menú de configuración, una lista de opciones cortas o un formulario con un número limitado de campos.', 25),
(83, 'Crear listas con un **gran número de elementos**, como feeds de noticias, listas de productos, listas de contactos o chats.', 26),
(84, 'Para listas que obtienen datos de una fuente dinámica (API, base de datos) y no se conoce el número exacto de elementos de antemano.', 26),
(85, 'Siempre que el rendimiento y el uso de memoria sean una consideración importante en la creación de listas.', 26);

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `widget_relacionado`
--

CREATE TABLE `widget_relacionado` (
  `id` int(11) NOT NULL,
  `nombre` text NOT NULL,
  `widget_id` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

--
-- RELACIONES PARA LA TABLA `widget_relacionado`:
--   `widget_id`
--       `widget_tab` -> `id`
--

--
-- Volcado de datos para la tabla `widget_relacionado`
--

INSERT INTO `widget_relacionado` (`id`, `nombre`, `widget_id`) VALUES
(1, 'AppBar', 1),
(2, 'FloatingActionButton', 1),
(3, 'Drawer', 1),
(4, 'BottomNavigationBar', 1),
(5, 'MaterialApp (que contiene el Scaffold)', 1),
(6, 'Scaffold (el padre común de AppBar)', 2),
(7, 'IconButton (usado frecuentemente en `leading` y `actions`)', 2),
(8, 'TabBar (usado en la propiedad `bottom`)', 2),
(9, 'Text (usado comúnmente en `title`)', 2),
(10, 'Scaffold (para la estructura de cada pantalla)', 3),
(11, 'WidgetsApp (el widget padre de MaterialApp para aplicaciones no Material)', 3),
(12, 'ThemeData (para definir el tema)', 3),
(13, 'Navigator (gestiona la pila de rutas)', 3),
(14, 'SizedBox (para espacios vacíos con tamaño fijo)', 4),
(15, 'Padding (solo para aplicar relleno)', 4),
(16, 'DecoratedBox (si solo necesitas la decoración)', 4),
(17, 'Align (si solo necesitas alinear un hijo)', 4),
(18, 'Center (si solo necesitas centrar un hijo)', 4),
(19, 'Row (para disposición horizontal)', 5),
(20, 'Expanded (para dar espacio flexible a un hijo en la Column/Row)', 5),
(21, 'Flexible (similar a Expanded, pero con menos rigidez)', 5),
(22, 'ListView (para listas desplazables de muchos elementos)', 5),
(23, 'Column (para disposición vertical)', 6),
(24, 'Expanded (para dar espacio flexible a un hijo en la Row/Column)', 6),
(25, 'Flexible (similar a Expanded, pero con menos rigidez)', 6),
(26, 'Wrap (para elementos que se envuelven a la siguiente línea si no hay espacio)', 6),
(27, 'Spacer (para crear espacio flexible entre elementos)', 6),
(28, 'RichText (cuando necesitas mezclar muchos estilos diferentes en un solo bloque de texto o aplicar gestos a partes específicas del texto).', 7),
(29, 'DefaultTextStyle (para establecer un estilo de texto predeterminado que los widgets `Text` hijos pueden heredar).', 7),
(30, 'TextField (para entrada de texto editable por el usuario).', 7),
(31, 'SelectableText (para texto que el usuario puede seleccionar y copiar).', 7),
(32, 'Column (usado frecuentemente como hijo para organizar verticalmente)', 8),
(33, 'Row (usado como hijo si `scrollDirection` es horizontal)', 8),
(34, 'ListView (para listas de elementos optimizadas con desplazamiento, que construyen elementos bajo demanda)', 8),
(35, 'CustomScrollView (para efectos de desplazamiento más avanzados y combinados)', 8),
(36, 'Scrollbar (para añadir una barra de desplazamiento visual)', 8),
(37, 'FadeInImage (para imágenes que aparecen gradualmente)', 9),
(38, 'CircleAvatar (para avatares circulares)', 9),
(39, 'CachedNetworkImage (un paquete popular para el manejo avanzado de imágenes en red, incluyendo caché y placeholders)', 9),
(40, 'Container (para contenedores más básicos sin diseño Material)', 10),
(41, 'Material (Card se construye sobre Material y hereda propiedades de él)', 10),
(42, 'InkWell (para añadir efectos visuales al tocar la Card)', 10),
(43, 'ListTile (a menudo usado como child dentro de una Card para elementos de lista, como en el ejemplo avanzado)', 10),
(44, 'SizedBox', 11),
(45, 'Container', 11),
(46, 'Margin (aunque `Container` con `margin` es el equivalente común)', 11),
(47, 'ListView', 12),
(48, 'Card', 12),
(49, 'Divider', 12),
(50, 'CheckboxListTile', 12),
(51, 'RadioListTile', 12),
(52, 'InkWell', 13),
(53, 'ElevatedButton', 13),
(54, 'TextButton', 13),
(55, 'RawGestureDetector', 13),
(56, 'MaterialApp (donde se configuran las rutas)', 14),
(57, 'PageRoute (como MaterialPageRoute o CupertinoPageRoute)', 14),
(58, 'ModalRoute (para acceder a los argumentos)', 14),
(59, 'WillPopScope (para controlar el botón de retroceso del dispositivo)', 14),
(60, 'SliverGridDelegateWithFixedCrossAxisCount (para definir la estructura de la cuadrícula con columnas fijas)', 15),
(61, 'SliverGridDelegateWithMaxCrossAxisExtent (para definir la estructura de la cuadrícula con tamaño máximo de elemento)', 15),
(62, 'ListView.builder (para listas lineales eficientes)', 15),
(63, 'CustomScrollView + SliverGrid (cuando necesitas combinar la cuadrícula con otros efectos de desplazamiento)', 15),
(64, 'Card (comúnmente usado como el widget individual dentro de la cuadrícula)', 15),
(65, 'ClipRRect (para redondear las esquinas de las imágenes o contenedores dentro de la cuadrícula)', 15),
(66, 'GridView.builder (la alternativa eficiente para listas largas o dinámicas)', 16),
(67, 'GridView.extent (otra forma de GridView que define el tamaño máximo de los elementos en el eje cruzado)', 16),
(68, 'Wrap (para elementos que fluyen a la siguiente línea/columna sin el comportamiento estricto de una cuadrícula)', 16),
(69, 'Card (comúnmente usado como el widget individual dentro de la cuadrícula)', 16),
(70, 'Scaffold (el contenedor principal para el Drawer)', 17),
(71, 'AppBar (donde se suele activar el Drawer con un ícono de menú)', 17),
(72, 'ListView (para organizar el contenido del Drawer)', 17),
(73, 'ListTile (para los elementos individuales del menú)', 17),
(74, 'DrawerHeader (para el encabezado del Drawer)', 17),
(75, 'BottomNavigationBar (una alternativa para navegación principal con menos opciones)', 17),
(76, 'Matrix4 (la clase subyacente para las transformaciones)', 18),
(77, 'AnimatedBuilder (para integrar `Transform` en animaciones más complejas)', 18),
(78, 'GestureDetector (para hacer que las transformaciones respondan a la interacción del usuario, como arrastrar o pellizcar)', 18),
(79, 'SizedBox, Container (usados para controlar el espacio real en el layout, a diferencia de `Transform` que solo afecta la visualización)', 18),
(80, 'TweenAnimationBuilder (otra opción para animar transformaciones de manera sencilla)', 18),
(81, 'SliverAppBar (barra de aplicación flexible para CustomScrollView)', 19),
(82, 'SliverList (versión de lista eficiente para CustomScrollView)', 19),
(83, 'SliverGrid (versión de cuadrícula eficiente para CustomScrollView)', 19),
(84, 'SliverToBoxAdapter (permite insertar widgets no-Sliver en CustomScrollView)', 19),
(85, 'SingleChildScrollView (alternativa más simple para desplazamiento de un solo hijo)', 19),
(86, 'ListView.builder, GridView.builder (widgets de lista/cuadrícula eficientes pero sin la flexibilidad de Slivers)', 19),
(87, 'PageController (para controlar el desplazamiento del PageView)', 20),
(88, 'DotsIndicator (un paquete común para indicadores de página visuales)', 20),
(89, 'ListView (para listas de desplazamiento genéricas)', 20),
(90, 'CarouselSlider (paquete de terceros para carruseles más complejos)', 20),
(91, 'TabBarView (para navegación por pestañas integrada con TabBar)', 20),
(92, 'Positioned (para posicionar hijos de Stack con coordenadas absolutas)', 21),
(93, 'Align (para alinear hijos de Stack a puntos específicos)', 21),
(94, 'Container (comúnmente usado como fondo o elementos dentro del Stack)', 21),
(95, 'Column, Row (para layouts lineales, no de superposición)', 21),
(96, 'Container (a menudo se usa con ClipRRect para redondear sus bordes)', 22),
(97, 'Image (comúnmente envuelto en ClipRRect)', 22),
(98, 'Card (ya tiene una propiedad `borderRadius`, pero ClipRRect es más general)', 22),
(99, 'ClipOval (para recortar a una forma ovalada/circular)', 22),
(100, 'ClipPath (para recortar a una forma personalizada)', 22),
(101, 'Scaffold (es donde típicamente se coloca BottomNavigationBar)', 23),
(102, 'BottomNavigationBarItem (los elementos individuales de la barra)', 23),
(103, 'TabBar / TabBarView (para navegación con pestañas en la parte superior)', 23),
(104, 'Drawer (para menús de navegación laterales, útiles para más de 5 destinos)', 23),
(105, 'PageView (a menudo se combina con BottomNavigationBar para cambiar el contenido de la página)', 23),
(106, 'Row (contenedor principal para Expanded y Flexible en horizontal)', 24),
(107, 'Column (contenedor principal para Expanded y Flexible en vertical)', 24),
(108, 'Flex (contenedor genérico que puede ser Row o Column)', 24),
(109, 'SizedBox (para dar espacio fijo y no flexible)', 24),
(110, 'ListView.builder (la alternativa eficiente para listas largas y dinámicas)', 25),
(111, 'ListView.separated (para listas con separadores entre elementos)', 25),
(112, 'SingleChildScrollView (para un solo widget que necesita desplazamiento)', 25),
(113, 'Column (para una lista vertical no desplazable)', 25),
(114, 'ListTile (comúnmente usado como un elemento de la lista)', 25),
(115, 'ListView (la alternativa simple, pero menos eficiente para listas cortas)', 26),
(116, 'ListView.separated (variante de builder para listas con separadores)', 26),
(117, 'GridView.builder (la versión de cuadrícula eficiente)', 26),
(118, 'SliverList (la versión de lista perezosa para `CustomScrollView`)', 26),
(119, 'ListTile (comúnmente usado como un elemento de la lista)', 26);

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `widget_tab`
--

CREATE TABLE `widget_tab` (
  `id` int(11) NOT NULL,
  `nombre` varchar(30) NOT NULL,
  `descripcion` text NOT NULL,
  `cuando_no_usar` text NOT NULL,
  `codigo` text NOT NULL,
  `imagen` text NOT NULL,
  `ruta` varchar(60) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

--
-- RELACIONES PARA LA TABLA `widget_tab`:
--

--
-- Volcado de datos para la tabla `widget_tab`
--

INSERT INTO `widget_tab` (`id`, `nombre`, `descripcion`, `cuando_no_usar`, `codigo`, `imagen`, `ruta`) VALUES
(1, 'Scaffold', 'Un widget fundamental de Material Design que proporciona una estructura básica para implementar el diseño visual de tu aplicación. Sirve como el \'lienzo\' principal donde colocas otros widgets como la barra de aplicación, el cuerpo principal, el botón de acción flotante, etc.', 'No uses `Scaffold` si estás construyendo un widget muy pequeño y específico que no necesita una estructura de pantalla completa (ej. un elemento de una lista, un botón personalizado). Para esos casos, un `Container` o un widget más simple sería suficiente.', 'Scaffold(\n  appBar: AppBar(title: const Text(\'Título\')),\n  body: const Center(child: Text(\'Contenido\')),\n  floatingActionButton: FloatingActionButton(\n    onPressed: () {},\n    child: const Icon(Icons.add),\n  ),\n);', 'https://firebasestorage.googleapis.com/v0/b/imagenesflutter.firebasestorage.app/o/Imagenes%2FScaffold.jpg?alt=media&token=8fa963d7-3e85-4eae-8f13-c8625498a73b', '/Page_Scaffold'),
(2, 'AppBar', 'Una barra de herramientas de Material Design que se coloca típicamente en la parte superior de un `Scaffold`. Se usa para mostrar el título de la pantalla, iconos de acción, y puede contener un botón de navegación (como el de \'volver\' o el de \'menú de hamburguesa\').', 'No uses `AppBar` si la pantalla no necesita una barra de herramientas en la parte superior, o si el diseño es completamente personalizado y no sigue las directrices de Material Design para una barra superior. En esos casos, podrías usar un `Container` o `Row` personalizado para lograr un efecto similar sin las funcionalidades y el estilo predefinidos de `AppBar`.', 'AppBar(\n  centerTitle: true,\n  title: const Text(\'Aplicación AppBar\'),\n  backgroundColor: Colors.orange,\n  actions: [\n    IconButton(\n      icon: const Icon(Icons.settings),\n      onPressed: () {},\n    ),\n  ],\n);', 'https://firebasestorage.googleapis.com/v0/b/imagenesflutter.firebasestorage.app/o/Imagenes%2FAppBar.jpg?alt=media&token=dfd95c04-a14b-4a34-be3d-9585a2e29f42', '/Page_AppBar'),
(3, 'MaterialApp', 'Un widget que envuelve tu aplicación Flutter para proveer funcionalidades de Material Design. Es la base fundamental para configurar el tema visual de la app, las rutas de navegación, la localización y otras configuraciones a nivel de toda la aplicación.', 'No uses `MaterialApp` si tu aplicación no va a seguir las directrices de diseño de Material Design (por ejemplo, si estás creando una app con un diseño muy personalizado o una app puramente basada en iOS usando `CupertinoApp`). En ese caso, usarías `WidgetsApp` (la base de `MaterialApp` y `CupertinoApp`) y construirías tu UI desde cero.', 'MaterialApp(\n  title: \'Mi Aplicación Flutter\',\n  home: Scaffold(\n    appBar: AppBar(title: const Text(\'Inicio\')),\n    body: const Center(child: Text(\'¡Bienvenido!\')),\n  ),\n  theme: ThemeData(primarySwatch: Colors.deepPurple),\n  debugShowCheckedModeBanner: false,\n);', 'assets/MaterialApp.jpg', '/Page_MaterialApp'),
(4, 'Container', 'Un widget flexible y versátil que se utiliza para contener, dimensionar, posicionar y estilizar otros widgets. Es como una caja en la que puedes meter otros elementos, controlando su tamaño, color, bordes, relleno (padding), margen (margin) y sombras. Es fundamental para agrupar elementos y darles un aspecto visual específico.', 'Aunque `Container` es muy versátil, no lo uses si solo necesitas una funcionalidad específica que otro widget hace de forma más eficiente y ligera. Por ejemplo:\n- Si solo necesitas espacio vacío, usa `SizedBox`.\n- Si solo necesitas aplicar padding, usa `Padding`.\n- Si solo necesitas centrar un widget, usa `Center`.\n- Si solo necesitas un color de fondo, `ColoredBox` es más simple.\nUsar `Container` por defecto para todo puede añadir un ligero overhead si sus capacidades avanzadas no son necesarias.', 'Container(\n  padding: const EdgeInsets.all(16),\n  margin: const EdgeInsets.symmetric(vertical: 10),\n  decoration: BoxDecoration(\n    color: Colors.blue[100],\n    borderRadius: BorderRadius.circular(12),\n    border: Border.all(color: Colors.blue, width: 2),\n  ),\n  width: double.infinity,\n  child: const Text(\n    \'Este es un ejemplo de Container\',\n    style: TextStyle(fontSize: 18),\n    textAlign: TextAlign.center,\n  ),\n);', 'https://firebasestorage.googleapis.com/v0/b/imagenesflutter.firebasestorage.app/o/Imagenes%2FContainer.jpg?alt=media&token=1e0f7fac-cd43-4a95-86a3-b78f5b566dd8', '/Page_Container'),
(5, 'Column', 'Un widget de diseño que organiza sus `children` (hijos) en una secuencia **vertical**. Es fundamental para construir interfaces donde los elementos se apilan uno encima del otro, adaptándose al espacio disponible y a la alineación que definas.', 'No uses `Column` para listas muy largas o infinitas, ya que carga y renderiza *todos* sus hijos a la vez, lo que puede afectar seriamente el rendimiento. Para eso, es mucho más eficiente usar widgets como `ListView.builder` o `CustomScrollView` que renderizan elementos a medida que son necesarios (visibles en pantalla). Tampoco la uses si necesitas que los elementos se superpongan (usa `Stack`) o si solo tienes un hijo y no necesitas el manejo de alineación que una `Column` ofrece (un `Container` o el widget directamente sería más simple).', 'Column(\n  mainAxisAlignment: MainAxisAlignment.center,\n  crossAxisAlignment: CrossAxisAlignment.center,\n  children: const [\n    Icon(Icons.star, size: 50, color: Colors.amber),\n    SizedBox(height: 10),\n    Text(\'Productos Favoritos\',\n      style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),\n    ),\n    SizedBox(height: 5),\n    Text(\'Organizados verticalmente.\', style: TextStyle(color: Colors.grey)),\n  ],\n);', 'https://firebasestorage.googleapis.com/v0/b/imagenesflutter.firebasestorage.app/o/Imagenes%2FColumn.jpg?alt=media&token=e93176b8-75e0-4303-a889-bbc663e3166a', '/Page_Column'),
(6, 'Row', 'Un widget de diseño que organiza sus `children` (hijos) en una secuencia **horizontal**. Es esencial para construir interfaces donde los elementos se colocan uno al lado del otro, adaptándose al espacio disponible y a la alineación que definas.', 'No uses `Row` si esperas que el contenido pueda exceder el ancho de la pantalla y necesites que se envuelva automáticamente a la siguiente línea (para eso, usa `Wrap`). Tampoco es adecuada para listas desplazables muy largas de elementos horizontales si no se envuelve en un `SingleChildScrollView` o `ListView.builder` con `scrollDirection: Axis.horizontal`.', 'Row(\n  mainAxisAlignment: MainAxisAlignment.spaceEvenly,\n  children: const [\n    Icon(Icons.home, size: 40),\n    Text(\'Inicio\'),\n    Icon(Icons.search, size: 40),\n    Text(\'Buscar\'),\n    Icon(Icons.settings, size: 40),\n    Text(\'Ajustes\'),\n  ],\n);', 'https://firebasestorage.googleapis.com/v0/b/imagenesflutter.firebasestorage.app/o/Imagenes%2FRow.jpg?alt=media&token=4a84c859-dd29-43e1-b1a2-10a4f2285ac9', '/Page_Row'),
(7, 'Text', 'Un widget fundamental en Flutter que se utiliza para mostrar una cadena de texto inmutable en la interfaz de usuario. Es la forma más básica y común de presentar información textual al usuario.', 'No uses `Text` si necesitas que el usuario pueda introducir o modificar el texto (para eso, `TextField` es la opción). Tampoco lo uses para texto que requiera interactividad avanzada en partes específicas (ej. un link clicable dentro de un párrafo), donde `Text.rich` o `RichText` serían más adecuados.', 'Text(\n  \'Hola Mundo Flutter! Esto es un ejemplo de texto.\',\n  style: TextStyle(\n    color: Colors.blueAccent,\n    fontSize: 20.0,\n    fontWeight: FontWeight.bold,\n    fontStyle: FontStyle.italic,\n    letterSpacing: 0.5,\n    decoration: TextDecoration.underline,\n    decorationColor: Colors.red,\n  ),\n  textAlign: TextAlign.center,\n  maxLines: 2,\n  overflow: TextOverflow.ellipsis,\n);', 'https://firebasestorage.googleapis.com/v0/b/imagenesflutter.firebasestorage.app/o/Imagenes%2FText.jpg?alt=media&token=79fb64d7-7b03-45b6-9de3-90a5ffc3bbab', '/Page_Text'),
(8, 'SingleChildScrollView', 'Un widget que hace que su único `child` (hijo) sea desplazable. Es ideal cuando tienes contenido que podría exceder el tamaño de la pantalla, como un formulario largo, una página de detalles o un texto extenso, y necesitas que el usuario pueda desplazarse para ver todo el contenido. A diferencia de `ListView`, solo maneja un único hijo.', 'No uses `SingleChildScrollView` para listas largas o infinitas de elementos (`ListView` es mucho más eficiente, ya que solo renderiza los elementos que son visibles en pantalla). `SingleChildScrollView` renderiza *todo* su `child` a la vez, lo que puede causar problemas de rendimiento si el contenido es excesivamente grande o complejo.', 'SingleChildScrollView(\n  padding: const EdgeInsets.all(20.0),\n  child: Column(\n    crossAxisAlignment: CrossAxisAlignment.start,\n    children: [ \n      const Text(\'Título Largo de Contenido Desplazable\', style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold)),\n      const SizedBox(height: 15),\n      Image.network(\'https://picsum.photos/400/300\'),\n      const SizedBox(height: 15),\n      const Text(\n        \'Este es un párrafo de texto muy largo que demuestra cómo SingleChildScrollView permite que todo el contenido sea visible a través del desplazamiento. Es útil para formularios, artículos o cualquier sección de la UI que pueda exceder los límites de la pantalla en dispositivos pequeños.\',\n        style: TextStyle(fontSize: 16),\n        textAlign: TextAlign.justify,\n      ),\n      const SizedBox(height: 50), // Espacio al final para ver el desplazamiento\n      ElevatedButton(onPressed: () {}, child: const Text(\'Ir arriba\')),\n    ],\n  ),\n);', 'https://firebasestorage.googleapis.com/v0/b/imagenesflutter.firebasestorage.app/o/Imagenes%2FSingleChildScrollView.jpg?alt=media&token=b4dcd89c-6e96-4e66-8c3d-9e127d11859d', '/Page_SingleChildScrollView'),
(9, 'Image', 'Un widget que se utiliza para mostrar imágenes en tu aplicación Flutter. Es increíblemente versátil, permitiéndote cargar imágenes desde diferentes fuentes: assets locales (paquete de la app), archivos en el dispositivo, la red (URLs) o incluso memoria.', 'No uses `Image.network` si necesitas un control avanzado de caché para imágenes de red (considera usar un paquete como `cached_network_image`). Tampoco lo uses si necesitas una imagen con bordes especiales que el widget no pueda lograr por sí solo; en esos casos, `ClipRRect` o `Container` con `decoration` e `image` pueden ser más adecuados.', 'Image.network(\n  \'https://picsum.photos/300/200\',\n  width: 300,\n  height: 200,\n  fit: BoxFit.cover,\n  loadingBuilder: (context, child, loadingProgress) {\n    if (loadingProgress == null) return child;\n    return const Center(child: CircularProgressIndicator());\n  },\n  errorBuilder: (context, error, stackTrace) {\n    return const Icon(Icons.broken_image, size: 100, color: Colors.grey);\n  },\n);', 'https://firebasestorage.googleapis.com/v0/b/imagenesflutter.firebasestorage.app/o/Imagenes%2FImage.jpg?alt=media&token=f39a0e8a-dea9-4f19-9b09-a9c9649c1b44', '/Page_Image'),
(10, 'Card', 'Un widget de Material Design que representa una \"tarjeta\" en la interfaz de usuario. Las tarjetas son superficies que contienen contenido y acciones sobre un tema único. Se caracterizan por tener esquinas ligeramente redondeadas y una elevación (sombra) que las hace parecer flotar sobre el fondo, proporcionando una jerarquía visual clara.', 'No uses `Card` si solo necesitas un contenedor rectangular simple sin las características de Material Design (como la elevación y las esquinas redondeadas). En esos casos, un `Container` es más ligero y apropiado. También, para listas muy largas o de rendimiento crítico, el uso excesivo de `Card` para cada elemento podría tener un impacto, siendo preferible optimizar con `ListView.builder` y estructuras más simples si el diseño lo permite.', 'Card(\n  margin: const EdgeInsets.all(16.0),\n  elevation: 8.0,\n  shape: RoundedRectangleBorder(\n    borderRadius: BorderRadius.circular(15.0),\n  ),\n  child: Padding(\n    padding: const EdgeInsets.all(16.0),\n    child: Column(\n      mainAxisSize: MainAxisSize.min,\n      children: [\n        const ListTile(\n          leading: Icon(Icons.album),\n          title: Text(\'Título de la Tarjeta\'),\n          subtitle: Text(\'Subtítulo de la descripción.\'),\n        ),\n        ButtonBar(\n          children: [\n            TextButton(onPressed: () {}, child: const Text(\'ACCIÓN 1\')),\n            TextButton(onPressed: () {}, child: const Text(\'ACCIÓN 2\')),\n          ],\n        ),\n      ],\n    ),\n  ),\n);', 'https://firebasestorage.googleapis.com/v0/b/imagenesflutter.firebasestorage.app/o/Imagenes%2FCard.jpg?alt=media&token=69053a8a-d139-464b-8102-f661affd1fd2', '/Page_Card'),
(11, 'Padding', 'Un widget fundamental en Flutter que inserta espacio vacío alrededor de su \'child\' (hijo). Permite controlar el espaciado interno de un widget, empujando su contenido lejos de sus bordes.', 'No uses `Padding` si el espaciado es parte inherente del diseño de un widget personalizado (donde podrías dibujar el padding directamente). Para espaciados simples entre elementos en un `Row` o `Column`, a veces `SizedBox` con `width` o `height` puede ser una alternativa más explícita.', 'Padding(\n  padding: const EdgeInsets.all(12.0),\n  child: Text(\n    \'Este texto tiene padding por todos lados.\',\n    style: TextStyle(fontSize: 18),\n  ),\n);', 'https://firebasestorage.googleapis.com/v0/b/imagenesflutter.firebasestorage.app/o/Imagenes%2FPadding.jpg?alt=media&token=f696f722-cbe2-461a-a2e4-9927635ccc85', '/Page_Padding'),
(12, 'ListTile', 'Un widget de Material Design que organiza de forma conveniente hasta tres líneas de texto y opcionalmente iconos iniciales y finales. Es ideal para elementos en listas, menús de navegación o cualquier lugar donde se necesite una fila de información estructurada.', 'No uses `ListTile` si necesitas un diseño de fila muy personalizado que no se ajuste a la estructura predefinida de tres líneas de texto y dos iconos. Para esos casos, considera usar `Row` y `Column` directamente para tener un control total del layout.', 'ListTile(\n  leading: Icon(Icons.star),\n  title: Text(\'Mi Elemento de Lista\'),\n  subtitle: Text(\'Esta es una descripción secundaria.\'),\n  trailing: Icon(Icons.arrow_forward_ios),\n  onTap: () {\n    print(\'ListTile presionado\');\n  },\n);', 'https://firebasestorage.googleapis.com/v0/b/imagenesflutter.firebasestorage.app/o/Imagenes%2FListTile.jpg?alt=media&token=f51346ee-6e7d-44fe-9d56-02070c73c1da', '/Page_ListTile'),
(13, 'GestureDetector', 'Un widget no visual que detecta gestos del usuario, como toques, arrastres o escalado, en el \'child\' al que envuelve. Permite hacer que cualquier widget sea interactivo, incluso si no tiene propiedades de `onPressed` por defecto.', 'Si un widget ya tiene una propiedad `onPressed` o similar (como `ElevatedButton`, `ListTile`), es preferible usar esa propiedad en lugar de envolverlo en un `GestureDetector` para un simple toque, ya que los widgets interactivos nativos de Material Design a menudo manejan efectos visuales (como ripples) automáticamente.', 'GestureDetector(\n  onTap: () {\n    print(\'Widget tocado!\');\n  },\n  onLongPress: () {\n    print(\'Widget mantenido presionado!\');\n  },\n  child: Container(\n    padding: const EdgeInsets.all(20),\n    color: Colors.amber,\n    child: const Text(\n      \'Toca o mantén presionado\',\n      style: TextStyle(fontSize: 16),\n    ),\n  ),\n);', 'https://firebasestorage.googleapis.com/v0/b/imagenesflutter.firebasestorage.app/o/Imagenes%2FGestureDetector.jpg?alt=media&token=cb4e3c4a-1448-4bf8-a1f2-448d34d7709a', '/Page_GestureDetector'),
(14, 'Navigator', 'Un widget que gestiona un historial de \'rutas\' (páginas o pantallas) de una aplicación como una pila. Permite la navegación entre diferentes pantallas de la aplicación, empujando nuevas rutas a la pila o sacando las existentes.', 'No es apropiado usar `Navigator` para cambios de UI pequeños dentro de una misma pantalla (ej. mostrar/ocultar un widget, cambiar un estado local). Para eso, usa `StatefulWidget` y `setState` o soluciones de gestión de estado como `Provider`, `Riverpod`, `Bloc`, etc.', 'class MyApp extends StatelessWidget {\n  const MyApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: \'App con Navegación\',\n      initialRoute: \'/\',\n      routes: {\n        \'/\': (context) => const HomeScreen(),\n        \'/details\': (context) => const DetailScreen(),\n        \'/settings\': (context) => const SettingsScreen(),\n      },\n      onGenerateRoute: (settings) {\n        // Un ejemplo avanzado para manejar rutas no definidas o con lógica compleja\n        if (settings.name == \'/product\') {\n          final args = settings.arguments as Map<String, dynamic>;\n          return MaterialPageRoute(builder: (context) => ProductScreen(productId: args[\'id\']));\n        }\n        return null; // Dejar que el sistema maneje otras rutas\n      },\n    );\n  }\n}\n\n// Ejemplo de HomeScreen\nclass HomeScreen extends StatelessWidget {\n  const HomeScreen({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text(\'Inicio\')),\n      body: Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: [\n            ElevatedButton(\n              onPressed: () {\n                Navigator.pushNamed(context, \'/details\',\n                    arguments: {\'data\': \'Información desde Home\'});\n              },\n              child: const Text(\'Ir a Detalles\'),\n            ),\n            ElevatedButton(\n              onPressed: () {\n                Navigator.pushNamed(context, \'/settings\');\n              },\n              child: const Text(\'Ir a Ajustes\'),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n\n// Ejemplo de DetailScreen\nclass DetailScreen extends StatelessWidget {\n  const DetailScreen({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    final Map<String, dynamic>? args = ModalRoute.of(context)!.settings.arguments as Map<String, dynamic>?;\n    final String receivedData = args?[\'data\'] ?? \'Sin datos\';\n\n    return Scaffold(\n      appBar: AppBar(title: const Text(\'Detalles\')),\n      body: Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: [\n            Text(\'Datos recibidos: $receivedData\'),\n            ElevatedButton(\n              onPressed: () {\n                Navigator.pop(context, \'Resultado desde Detalles\');\n              },\n              child: const Text(\'Volver con resultado\'),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n', 'https://firebasestorage.googleapis.com/v0/b/imagenesflutter.firebasestorage.app/o/Imagenes%2FNavigator.jpg?alt=media&token=2d0369cd-01b6-4774-8b93-78596e6b796a', '/Page_Navigator'),
(15, 'GridView.builder', 'Un widget eficiente para construir cuadrículas desplazables de elementos, renderizando solo aquellos que son visibles en la pantalla. Es ideal para galerías, tiendas de productos o cualquier colección grande de ítems que necesitan un diseño de rejilla.', 'No uses `GridView.builder` cuando:\n- Tienes un número muy pequeño y fijo de elementos que no van a cambiar. Un `Column` o `Row` con un `Wrap` o un `GridView` simple (sin `.builder`) podría ser más directo si no necesitas la eficiencia de la construcción perezosa.\n- La interfaz requiere efectos de desplazamiento muy avanzados, como AppBars plegables o la combinación de diferentes tipos de desplazamiento. En ese caso, `CustomScrollView` con `SliverGrid` es la elección correcta.', 'import \'package:flutter/material.dart\';\n\nclass GridViewBuilderExampleMinimal extends StatelessWidget {\n  const GridViewBuilderExampleMinimal({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text(\'GridView.builder Minimal\')),\n      body: GridView.builder(\n        itemCount: 20,\n        gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(\n          crossAxisCount: 3,\n          crossAxisSpacing: 8.0,\n          mainAxisSpacing: 8.0,\n        ),\n        itemBuilder: (BuildContext context, int index) {\n          return Container(\n            color: Colors.blue[100 * (index % 9)],\n            child: Center(child: Text(\'Item ${index + 1}\')),\n          );\n        },\n      ),\n    );\n  }\n}', 'https://firebasestorage.googleapis.com/v0/b/imagenesflutter.firebasestorage.app/o/Imagenes%2FGridview_builder.jpg?alt=media&token=071fed57-b5cb-4811-94f4-98b0a4d86b60', '/Page_GridView_builder'),
(16, 'GridView.count', 'Un widget que organiza sus hijos en una cuadrícula con un número fijo de elementos a lo largo del eje transversal (columnas o filas). Es útil para mostrar un número pequeño y predefinido de elementos en un layout de rejilla donde la eficiencia de carga perezosa no es una preocupación crítica.', 'No uses `GridView.count` cuando:\n- La cantidad de elementos es **grande o puede crecer dinámicamente**. Esto afectará negativamente el rendimiento ya que todos los elementos se construyen a la vez. En su lugar, usa `GridView.builder`.\n- Necesitas comportamientos de desplazamiento complejos que involucren una `SliverAppBar` u otros `Slivers` especiales. Para esos casos, `CustomScrollView` con `SliverGrid` es la opción correcta.', 'import \'package:flutter/material.dart\';\n\nclass GridViewCountExampleMinimal extends StatelessWidget {\n  const GridViewCountExampleMinimal({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text(\'GridView.count Minimal\')),\n      body: GridView.count(\n        crossAxisCount: 3, // 3 columnas fijas\n        padding: const EdgeInsets.all(8.0),\n        mainAxisSpacing: 8.0,\n        crossAxisSpacing: 8.0,\n        children: List.generate(9, (index) {\n          return Container(\n            color: Colors.teal[100 * (index % 9)],\n            child: Center(child: Text(\'Item ${index + 1}\')),\n          );\n        }),\n      ),\n    );\n  }\n}', 'https://firebasestorage.googleapis.com/v0/b/imagenesflutter.firebasestorage.app/o/Imagenes%2FGridview_count.jpg?alt=media&token=3745c14e-bccd-4950-a4d0-75ae78e22a8f', '/Page_GridView_count'),
(17, 'Drawer', 'Un panel de Material Design que se desliza horizontalmente desde el borde de la pantalla (generalmente el izquierdo) para mostrar opciones de navegación de alto nivel en una aplicación. Es comúnmente conocido como el \'menú de hamburguesa\'.', 'No uses `Drawer` para:\n- Mostrar una gran cantidad de datos o listas detalladas (ej. una lista de 50 productos). Para esto, es mejor una pantalla dedicada con un `ListView` en el `body` del `Scaffold`.\n- Acciones contextuales o relacionadas con el contenido específico de la pantalla actual.\n- Navegación entre un número muy pequeño de vistas principales (2-5), donde un `BottomNavigationBar` podría ser más directo y accesible para el usuario.', 'Scaffold(\n  appBar: AppBar(\n    title: const Text(\'Mi Aplicación\'),\n  ),\n  drawer: Drawer(\n    child: ListView(\n      padding: EdgeInsets.zero, // Importante para evitar padding superior\n      children: <Widget>[\n        const DrawerHeader(\n          decoration: BoxDecoration(\n            color: Colors.deepPurple,\n          ),\n          child: Text(\n            \'Menú de la App\',\n            style: TextStyle(color: Colors.white, fontSize: 24),\n          ),\n        ),\n        ListTile(\n          leading: const Icon(Icons.home),\n          title: const Text(\'Inicio\'),\n          onTap: () {\n            Navigator.pop(context); // Cierra el Drawer\n            // Aquí puedes navegar a la pantalla de inicio\n            // Navigator.pushReplacementNamed(context, \'/\');\n          },\n        ),\n        ListTile(\n          leading: const Icon(Icons.person),\n          title: const Text(\'Perfil\'),\n          onTap: () {\n            Navigator.pop(context);\n            // Navigator.pushNamed(context, \'/profile\');\n          },\n        ),\n        const Divider(), // Separador visual\n        ListTile(\n          title: const Text(\'Cerrar Sesión\'),\n          onTap: () {\n            Navigator.pop(context);\n            // Lógica para cerrar sesión\n          },\n        ),\n      ],\n    ),\n  ),\n  body: const Center(\n    child: Text(\'Contenido principal de la pantalla\'),\n  ),\n);', 'https://firebasestorage.googleapis.com/v0/b/imagenesflutter.firebasestorage.app/o/Imagenes%2FDrawer.jpg?alt=media&token=e4370fe7-9e27-4063-a42b-bf3e199dba4e', '/Page_Drawer'),
(18, 'Transform', 'Un widget que aplica una transformación (rotación, escalado, traslación) a su widget hijo antes de pintarlo. Permite manipular visualmente la posición, el tamaño y la orientación de un widget sin afectar su espacio real en el layout. Es la base para crear efectos visuales y animaciones 3D.', 'No uses `Transform` si:\n- Necesitas cambiar el espacio real que ocupa un widget en el layout de la pantalla (ej. para empujar otros widgets, afectar el flujo de una `Column` o `Row`). Para esto, usa propiedades de tamaño (`width`, `height`), `Padding`, `SizedBox` o widgets flexibles como `Flexible`/`Expanded`.\n- Solo necesitas mover un widget una cantidad fija y simple en 2D sin otras transformaciones. En algunos casos, `Positioned` dentro de un `Stack` puede ser una alternativa más sencilla para un control absoluto de la posición en un contexto de superposición.', 'import \'package:flutter/material.dart\';\nimport \'dart:math\' as math;\n\n// Ejemplo interactivo con sliders para controlar rotaciones (requiere StatefulWidget)\nclass TransformExampleScreen extends StatefulWidget {\n  const TransformExampleScreen({super.key});\n\n  @override\n  State<TransformExampleScreen> createState() => _TransformExampleScreenState();\n}\n\nclass _TransformExampleScreenState extends State<TransformExampleScreen> {\n  double _rotationX = 0.0;\n  double _rotationY = 0.0;\n  double _rotationZ = 0.0;\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text(\'Transform con Sliders\')),\n      body: Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: [\n            Transform(\n              alignment: Alignment.center,\n              transform: Matrix4.identity()\n                ..setEntry(3, 2, 0.001) // Perspectiva para 3D\n                ..rotateX(_rotationX)\n                ..rotateY(_rotationY)\n                ..rotateZ(_rotationZ),\n              child: Container(\n                width: 150, height: 150, color: Colors.deepPurple,\n                child: const Center(child: Text(\'Gírame!\', style: TextStyle(color: Colors.white, fontSize: 24))),\n              ),\n            ),\n            const SizedBox(height: 40),\n            _buildSlider(\'Rotación X\', _rotationX, (val) => setState(() => _rotationX = val)),\n            _buildSlider(\'Rotación Y\', _rotationY, (val) => setState(() => _rotationY = val)),\n            _buildSlider(\'Rotación Z\', _rotationZ, (val) => setState(() => _rotationZ = val)),\n          ],\n        ),\n      ),\n    );\n  }\n\n  Widget _buildSlider(String label, double value, ValueChanged<double> onChanged) {\n    return Padding(\n      padding: const EdgeInsets.symmetric(horizontal: 20.0, vertical: 8.0),\n      child: Column(\n        children: [\n          Text(\'$label: ${(value * 180 / math.pi).toStringAsFixed(0)}°\'),\n          Slider(\n            value: value,\n            min: -math.pi, max: math.pi, divisions: 360,\n            label: \'${(value * 180 / math.pi).toStringAsFixed(0)}°\',\n            onChanged: onChanged,\n          ),\n        ],\n      ),\n    );\n  }\n}', 'assets/Transform.jpg', '/Page_Transform'),
(19, 'CustomScrollView', 'Un widget avanzado que proporciona un desplazamiento personalizado y la capacidad de combinar diferentes tipos de efectos de desplazamiento (como barras de aplicación que se encogen, listas y cuadrículas) en una única área desplazable. Construye su contenido utilizando \'Slivers\', que son piezas de contenido desplazable con comportamientos específicos.', 'No uses `CustomScrollView` cuando:\n- Solo necesitas que un único bloque de contenido se desplace y no requieres efectos de desplazamiento complejos o combinación de diferentes tipos de listas. En estos casos, `SingleChildScrollView` es más simple y suficiente.\n- La lista de elementos es pequeña y fija, y el rendimiento no es una preocupación crítica. `SingleChildScrollView` o incluso un `Column` dentro de un `SingleChildScrollView` podría ser más directo.', 'import \'package:flutter/material.dart\';\n\nclass CustomScrollViewExample extends StatelessWidget {\n  const CustomScrollViewExample({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: CustomScrollView(\n        slivers: <Widget>[\n          const SliverAppBar(\n            pinned: true, // La barra se mantiene visible en la parte superior\n            expandedHeight: 250.0,\n            flexibleSpace: FlexibleSpaceBar(\n              title: Text(\'Mi Perfil\', style: TextStyle(color: Colors.white)),\n              background: Image.network(\n                \'https://picsum.photos/800/400?random=1\', // Imagen de fondo\n                fit: BoxFit.cover,\n              ),\n            ),\n          ),\n          SliverToBoxAdapter(\n            // Un widget regular que se desplaza con los slivers\n            child: Container(\n              padding: const EdgeInsets.all(16.0),\n              color: Colors.grey[200],\n              child: const Text(\n                \'Información de usuario y estadísticas:\',\n                style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),\n              ),\n            ),\n          ),\n          SliverList(\n            delegate: SliverChildBuilderDelegate(\n              (BuildContext context, int index) {\n                return ListTile(\n                  leading: Icon(Icons.person), // Icono para cada elemento\n                  title: Text(\'Detalle de Usuario ${index + 1}\'),\n                  subtitle: Text(\'Información adicional del perfil.\'),\n                );\n              },\n              childCount: 20, // 20 elementos en la lista\n            ),\n          ),\n          SliverGrid(\n            delegate: SliverChildBuilderDelegate(\n              (BuildContext context, int index) {\n                return Card(\n                  color: Colors.blueGrey[100 * (index % 9) + 100],\n                  child: Center(\n                    child: Text(\'Item ${index + 1}\', style: TextStyle(color: Colors.white)),\n                  ),\n                );\n              },\n              childCount: 12, // 12 elementos en la cuadrícula\n            ),\n            gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(\n              crossAxisCount: 3, // 3 columnas\n              mainAxisSpacing: 8.0,\n              crossAxisSpacing: 8.0,\n              childAspectRatio: 1.0, // Cuadrados\n            ),\n          ),\n          SliverPadding(\n            padding: const EdgeInsets.all(16.0),\n            sliver: SliverToBoxAdapter(\n              child: ElevatedButton(\n                onPressed: () { /* Acción */ },\n                child: const Text(\'Ver más\'),\n              ),\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n}', 'assets/CustomScrollView.jpg', '/Page_CustomScrollView'),
(20, 'PageView', 'Un widget que permite al usuario deslizar horizontal o verticalmente para navegar entre una colección de widgets (\'páginas\'). Es ideal para mostrar contenido en un formato de carrusel, tutoriales de bienvenida o vistas de pestañas personalizadas.', 'No uses `PageView` si:\n- La colección de elementos es muy grande y el usuario necesita verlos en un desplazamiento continuo sin el concepto de \'páginas\' discretas (usa `ListView.builder`).\n- Necesitas superponer widgets uno encima del otro sin deslizamiento de página (usa `Stack`).\n- Estás construyendo una navegación principal con un número fijo y pequeño de destinos que son mejor servidos por `BottomNavigationBar` o `TabBar` con `TabBarView`.', 'import \'package:flutter/material.dart\';\n\nclass PageViewExample extends StatefulWidget {\n  const PageViewExample({super.key});\n\n  @override\n  State<PageViewExample> createState() => _PageViewExampleState();\n}\n\nclass _PageViewExampleState extends State<PageViewExample> {\n  final PageController _pageController = PageController();\n  int _currentPage = 0;\n\n  @override\n  void dispose() {\n    _pageController.dispose();\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text(\'PageView Example\')),\n      body: Column(\n        children: [\n          Expanded(\n            child: PageView(\n              controller: _pageController,\n              onPageChanged: (int index) {\n                setState(() {\n                  _currentPage = index;\n                });\n              },\n              children: [\n                _buildPage(Colors.red.shade200, \'Bienvenido\', \'Desliza para empezar.\'),\n                _buildPage(Colors.green.shade200, \'Explora\', \'Descubre nuevas funciones.\'),\n                _buildPage(Colors.blue.shade200, \'Disfruta\', \'Tu viaje comienza aquí.\'),\n              ],\n            ),\n          ),\n          // Indicadores de página básicos\n          Padding(\n            padding: const EdgeInsets.all(16.0),\n            child: Row(\n              mainAxisAlignment: MainAxisAlignment.center,\n              children: List.generate(3, (index) {\n                return AnimatedContainer(\n                  duration: const Duration(milliseconds: 150),\n                  margin: const EdgeInsets.symmetric(horizontal: 4.0),\n                  height: 10.0,\n                  width: _currentPage == index ? 24.0 : 10.0,\n                  decoration: BoxDecoration(\n                    color: _currentPage == index ? Colors.blueAccent : Colors.grey,\n                    borderRadius: BorderRadius.circular(5.0),\n                  ),\n                );\n              }),\n            ),\n          ),\n          // Botones para navegar programáticamente\n          Row(\n            mainAxisAlignment: MainAxisAlignment.spaceEvenly,\n            children: [\n              ElevatedButton(\n                onPressed: _currentPage > 0\n                    ? () {\n                        _pageController.previousPage(\n                          duration: const Duration(milliseconds: 300),\n                          curve: Curves.easeIn,\n                        );\n                      }\n                    : null,\n                child: const Text(\'Anterior\'),\n              ),\n              ElevatedButton(\n                onPressed: _currentPage < 2\n                    ? () {\n                        _pageController.nextPage(\n                          duration: const Duration(milliseconds: 300),\n                          curve: Curves.easeIn,\n                        );\n                      }\n                    : null,\n                child: const Text(\'Siguiente\'),\n              ),\n            ],\n          ),\n          const SizedBox(height: 20),\n        ],\n      ),\n    );\n  }\n\n  Widget _buildPage(Color color, String title, String subtitle) {\n    return Container(\n      color: color,\n      child: Column(\n        mainAxisAlignment: MainAxisAlignment.center,\n        children: [\n          Text(title, style: const TextStyle(fontSize: 32, fontWeight: FontWeight.bold)),\n          const SizedBox(height: 10),\n          Text(subtitle, style: const TextStyle(fontSize: 18)),\n        ],\n      ),\n    );\n  }\n}', 'https://firebasestorage.googleapis.com/v0/b/imagenesflutter.firebasestorage.app/o/Imagenes%2FPageview.jpg?alt=media&token=6423a93e-e7f9-4fd7-9726-ab208f1b2d7b', '/Page_PageView'),
(21, 'Stack', 'Un widget que permite superponer múltiples widgets uno encima del otro a lo largo del eje Z (profundidad). Los hijos se dibujan en el orden en que aparecen en la lista, de abajo hacia arriba. Es ideal para crear interfaces donde los elementos se colocan en capas, como insignias de notificación, botones flotantes o texto sobre imágenes.', 'No uses `Stack` si:\n- Necesitas organizar widgets en una secuencia lineal (vertical u horizontal). Usa `Column` o `Row` en su lugar.\n- El objetivo es crear una cuadrícula de elementos. Usa `GridView`.\n- Solo necesitas agregar un espacio alrededor de un widget. Usa `Padding` o `SizedBox`.', 'import \'package:flutter/material.dart\';\n\nclass StackExample extends StatelessWidget {\n  const StackExample({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text(\'Stack Example\')),\n      body: Center(\n        child: Stack(\n          alignment: Alignment.center, // Alinea los hijos no posicionados al centro\n          children: [\n            // Widget de fondo (el más bajo en la pila)\n            Container(\n              width: 300, height: 300,\n              color: Colors.blueGrey.shade800,\n            ),\n            // Texto superpuesto\n            const Text(\n              \'Flutter Power!\',\n              style: TextStyle(color: Colors.white, fontSize: 30, fontWeight: FontWeight.bold),\n            ),\n            // Ícono posicionado en la esquina inferior derecha\n            Positioned(\n              bottom: 20,\n              right: 20,\n              child: Container(\n                padding: const EdgeInsets.all(8.0),\n                decoration: BoxDecoration(\n                  color: Colors.amberAccent,\n                  borderRadius: BorderRadius.circular(10),\n                ),\n                child: const Icon(Icons.flash_on, color: Colors.deepOrange, size: 40),\n              ),\n            ),\n            // Círculo con número (ejemplo de badge)\n            Positioned(\n              top: 30, \n              left: 30,\n              child: Container(\n                padding: const EdgeInsets.all(6),\n                decoration: BoxDecoration(\n                  color: Colors.red,\n                  borderRadius: BorderRadius.circular(15),\n                  border: Border.all(color: Colors.white, width: 2)\n                ),\n                constraints: const BoxConstraints(\n                  minWidth: 30,\n                  minHeight: 30,\n                ),\n                child: const Text(\n                  \'99+\',\n                  style: TextStyle(color: Colors.white, fontSize: 14, fontWeight: FontWeight.bold),\n                  textAlign: TextAlign.center,\n                ),\n              ),\n            )\n          ],\n        ),\n      ),\n    );\n  }\n}', 'https://firebasestorage.googleapis.com/v0/b/imagenesflutter.firebasestorage.app/o/Imagenes%2FStack.jpg?alt=media&token=8d0ac94e-636a-4924-8f91-cbc3ef048880', '/Page_Stack'),
(22, 'ClipRRect', 'Un widget que recorta a su hijo en un rectángulo con esquinas redondeadas. Es muy útil para dar un aspecto más suave y moderno a imágenes, contenedores o cualquier otro widget visual.', 'No uses `ClipRRect` si:\n- El widget hijo ya tiene su propia propiedad `borderRadius` (ej. `Container` con `BoxDecoration`, `Card`). Es más eficiente usar la propiedad interna.\n- Necesitas una forma de recorte que no sea un rectángulo redondeado (ej. un círculo, un polígono irregular). Usa `ClipOval` o `ClipPath`.\n- El rendimiento es crítico y no necesitas el suavizado de bordes, podrías usar un `BorderRadius` directamente en un `BoxDecoration` si el fondo es sólido.', 'import \'package:flutter/material.dart\';\n\nclass ClipRRectExample extends StatelessWidget {\n  const ClipRRectExample({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text(\'ClipRRect Example\')),\n      body: Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.spaceEvenly,\n          children: [\n            // Imagen con esquinas redondeadas\n            ClipRRect(\n              borderRadius: BorderRadius.circular(20.0),\n              child: Image.network(\n                \'https://picsum.photos/250/200?random=5\',\n                width: 250,\n                height: 200,\n                fit: BoxFit.cover,\n              ),\n            ),\n            // Contenedor con esquinas muy redondeadas\n            ClipRRect(\n              borderRadius: BorderRadius.circular(50.0), // Para un círculo o forma ovalada\n              child: Container(\n                width: 150,\n                height: 150,\n                color: Colors.deepPurple,\n                child: const Center(\n                  child: Text(\n                    \'¡Clip!\',\n                    style: TextStyle(color: Colors.white, fontSize: 24),\n                  ),\n                ),\n              ),\n            ),\n            // Un Card con ClipRRect (aunque Card ya tiene su propio borderRadius)\n            // Esto demuestra que se puede aplicar a cualquier Widget\n            ClipRRect(\n              borderRadius: BorderRadius.circular(12.0),\n              child: Card(\n                elevation: 5,\n                child: Padding(\n                  padding: const EdgeInsets.all(20.0),\n                  child: Text(\'Tarjeta con ClipRRect\'),\n                ),\n              ),\n            )\n          ],\n        ),\n      ),\n    );\n  }\n}', 'https://firebasestorage.googleapis.com/v0/b/imagenesflutter.firebasestorage.app/o/Imagenes%2FCliprrect%20.jpg?alt=media&token=2aa078aa-66a1-4d1d-b846-1f64ce17248e', '/Page_ClipRRect'),
(23, 'BottomNavigationBar', 'Un widget de Material Design que proporciona una barra de navegación en la parte inferior de la pantalla. Permite a los usuarios cambiar rápidamente entre un número pequeño (generalmente 3-5) de destinos de nivel superior en la aplicación, siendo un componente clave para la navegación principal.', 'No uses `BottomNavigationBar` si:\n- Tienes más de 5 destinos de navegación principales (considera un `Drawer` o `TabBar`).\n- La navegación es secundaria o contextual (dentro de una sección específica de la app).\n- Necesitas una barra de aplicación en la parte inferior con un `FloatingActionButton` centrado y sobresaliendo (en ese caso, `BottomAppBar` es más apropiado).', 'import \'package:flutter/material.dart\';\n\nclass BottomNavigationBarExampleMinimal extends StatefulWidget {\n  const BottomNavigationBarExampleMinimal({super.key});\n\n  @override\n  State<BottomNavigationBarExampleMinimal> createState() => _BottomNavigationBarExampleMinimalState();\n}\n\nclass _BottomNavigationBarExampleMinimalState extends State<BottomNavigationBarExampleMinimal> {\n  int _selectedIndex = 0;\n\n  static const List<Widget> _pages = <Widget>[\n    Center(child: Text(\'Inicio\', style: TextStyle(fontSize: 24))), \n    Center(child: Text(\'Buscar\', style: TextStyle(fontSize: 24))), \n    Center(child: Text(\'Perfil\', style: TextStyle(fontSize: 24))), \n  ];\n\n  void _onItemTapped(int index) {\n    setState(() {\n      _selectedIndex = index;\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text(\'Bottom Nav Bar Minimal\')),\n      body: _pages.elementAt(_selectedIndex),\n      bottomNavigationBar: BottomNavigationBar(\n        items: const <BottomNavigationBarItem>[\n          BottomNavigationBarItem(icon: Icon(Icons.home), label: \'Home\'),\n          BottomNavigationBarItem(icon: Icon(Icons.search), label: \'Search\'),\n          BottomNavigationBarItem(icon: Icon(Icons.person), label: \'Profile\'),\n        ],\n        currentIndex: _selectedIndex,\n        selectedItemColor: Colors.amber[800],\n        onTap: _onItemTapped,\n      ),\n    );\n  }\n}', 'https://firebasestorage.googleapis.com/v0/b/imagenesflutter.firebasestorage.app/o/Imagenes%2Fbutton_navigation_bar%20.jpg?alt=media&token=2999ace1-581a-401b-a229-2ba33344080f', '/Page_BottomNavigationBar'),
(24, 'Expanded y Flexible', 'Widgets de layout que controlan cómo un hijo ocupa el espacio disponible dentro de un `Row`, `Column` o `Flex`. `Expanded` fuerza a su hijo a llenar el espacio, mientras que `Flexible` le permite ser más pequeño si su contenido no lo requiere.', 'No uses `Expanded` o `Flexible` como hijos directos de un `Scaffold` o de cualquier widget que no sea un `Row`, `Column` o `Flex`. Un error de `Layout` común es tratar de usarlos fuera de estos contenedores.', 'import \'package:flutter/material.dart\';\n\nclass ExpandedFlexibleExample extends StatelessWidget {\n  const ExpandedFlexibleExample({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text(\'Expanded vs Flexible\')),\n      body: Padding(\n        padding: const EdgeInsets.all(16.0),\n        child: Column(\n          children: [\n            const Text(\'Expanded (Se estira para llenar):\'),\n            Row(\n              children: [\n                Container(width: 50, height: 50, color: Colors.red),\n                Expanded(\n                  child: Container(height: 50, color: Colors.blue, child: const Center(child: Text(\'Expanded\'))),\n                ),\n              ],\n            ),\n            const SizedBox(height: 20),\n            const Text(\'Flexible (Puede ceder espacio):\'),\n            Row(\n              children: [\n                Container(width: 50, height: 50, color: Colors.red),\n                Flexible(\n                  child: Container(height: 50, color: Colors.green, child: const Center(child: Text(\'Flexible\'))),\n                ),\n              ],\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}', 'https://firebasestorage.googleapis.com/v0/b/imagenesflutter.firebasestorage.app/o/Imagenes%2FExpanded.jpg?alt=media&token=72b72a62-d2a1-483d-bae6-127cc41283ac', '/Page_Expanded'),
(25, 'ListView', 'Un widget que organiza sus hijos en una lista desplazable a lo largo de un solo eje. Es la forma más básica de crear una lista en Flutter. Es ideal para listas con un número pequeño y fijo de elementos, ya que construye y renderiza todos sus hijos de inmediato.', 'No uses `ListView` si la lista tiene un **gran número de elementos** (cientos o miles), ya que esto causará problemas de rendimiento y un alto consumo de memoria al construir todos los widgets a la vez. Para esos casos, **`ListView.builder` es la opción correcta y más eficiente**.', 'import \'package:flutter/material.dart\';\n\nclass ListViewExampleMinimal extends StatelessWidget {\n  const ListViewExampleMinimal({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text(\'ListView Minimal\')),\n      body: ListView(\n        padding: const EdgeInsets.all(8.0),\n        children: const [\n          ListTile(leading: Icon(Icons.home), title: Text(\'Inicio\')), \n          Divider(), \n          ListTile(leading: Icon(Icons.favorite), title: Text(\'Favoritos\')), \n          Divider(), \n          ListTile(leading: Icon(Icons.settings), title: Text(\'Configuración\')), \n        ],\n      ),\n    );\n  }\n}', 'https://firebasestorage.googleapis.com/v0/b/imagenesflutter.firebasestorage.app/o/Imagenes%2FListView.jpg?alt=media&token=d67101b8-6b45-4f1a-aa60-752539f5dd80', '/Page_ListView'),
(26, 'ListView.builder', 'Un widget de lista eficiente que construye sus hijos de forma perezosa, es decir, solo cuando se desplazan hacia la vista. Esta optimización lo hace ideal para listas con un número grande o potencialmente infinito de elementos, ya que minimiza el consumo de memoria y CPU al no renderizar widgets que no son visibles.', 'No uses `ListView.builder` cuando la lista tiene un número **muy pequeño y fijo de elementos** (ej. 3 o 4 ítems). En esos casos, un `ListView` simple es más legible y suficiente.', 'import \'package:flutter/material.dart\';\n\nclass ListViewBuilderExampleMinimal extends StatelessWidget {\n  const ListViewBuilderExampleMinimal({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    final List<String> items = List.generate(100, (index) => \'Elemento ${index + 1}\');\n\n    return Scaffold(\n      appBar: AppBar(title: const Text(\'ListView.builder Minimal\')),\n      body: ListView.builder(\n        itemCount: items.length,\n        itemBuilder: (BuildContext context, int index) {\n          return Card(\n            child: ListTile(\n              title: Text(items[index]),\n              subtitle: Text(\'Índice: $index\'),\n              leading: const Icon(Icons.list),\n            ),\n          );\n        },\n      ),\n    );\n  }\n}', 'https://firebasestorage.googleapis.com/v0/b/imagenesflutter.firebasestorage.app/o/Imagenes%2FListView_builder%20.jpg?alt=media&token=77e81e9e-834e-432e-89d1-41359f48f6c7', '/Page_ListView.builder');

--
-- Índices para tablas volcadas
--

--
-- Indices de la tabla `constructor_comun`
--
ALTER TABLE `constructor_comun`
  ADD PRIMARY KEY (`id`),
  ADD KEY `widget_id` (`widget_id`),
  ADD KEY `ix_constructor_comun_id` (`id`);

--
-- Indices de la tabla `propiedad_detallada`
--
ALTER TABLE `propiedad_detallada`
  ADD PRIMARY KEY (`id`),
  ADD KEY `widget_id` (`widget_id`),
  ADD KEY `ix_Propiedad_detallada_id` (`id`);

--
-- Indices de la tabla `uso_comun`
--
ALTER TABLE `uso_comun`
  ADD PRIMARY KEY (`id`),
  ADD KEY `widget_id` (`widget_id`),
  ADD KEY `ix_uso_comun_id` (`id`);

--
-- Indices de la tabla `widget_relacionado`
--
ALTER TABLE `widget_relacionado`
  ADD PRIMARY KEY (`id`),
  ADD KEY `widget_id` (`widget_id`),
  ADD KEY `ix_widget_relacionado_id` (`id`);

--
-- Indices de la tabla `widget_tab`
--
ALTER TABLE `widget_tab`
  ADD PRIMARY KEY (`id`),
  ADD KEY `ix_Widget_tab_id` (`id`);

--
-- AUTO_INCREMENT de las tablas volcadas
--

--
-- AUTO_INCREMENT de la tabla `constructor_comun`
--
ALTER TABLE `constructor_comun`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=38;

--
-- AUTO_INCREMENT de la tabla `propiedad_detallada`
--
ALTER TABLE `propiedad_detallada`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=143;

--
-- AUTO_INCREMENT de la tabla `uso_comun`
--
ALTER TABLE `uso_comun`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=86;

--
-- AUTO_INCREMENT de la tabla `widget_relacionado`
--
ALTER TABLE `widget_relacionado`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=120;

--
-- AUTO_INCREMENT de la tabla `widget_tab`
--
ALTER TABLE `widget_tab`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=27;

--
-- Restricciones para tablas volcadas
--

--
-- Filtros para la tabla `constructor_comun`
--
ALTER TABLE `constructor_comun`
  ADD CONSTRAINT `constructor_comun_ibfk_1` FOREIGN KEY (`widget_id`) REFERENCES `widget_tab` (`id`) ON DELETE CASCADE;

--
-- Filtros para la tabla `propiedad_detallada`
--
ALTER TABLE `propiedad_detallada`
  ADD CONSTRAINT `propiedad_detallada_ibfk_1` FOREIGN KEY (`widget_id`) REFERENCES `widget_tab` (`id`);

--
-- Filtros para la tabla `uso_comun`
--
ALTER TABLE `uso_comun`
  ADD CONSTRAINT `uso_comun_ibfk_1` FOREIGN KEY (`widget_id`) REFERENCES `widget_tab` (`id`) ON DELETE CASCADE;

--
-- Filtros para la tabla `widget_relacionado`
--
ALTER TABLE `widget_relacionado`
  ADD CONSTRAINT `widget_relacionado_ibfk_1` FOREIGN KEY (`widget_id`) REFERENCES `widget_tab` (`id`) ON DELETE CASCADE;
COMMIT;
